import { z } from 'zod';
import { EContentBlockType } from '@/modules/core/types/record.types';
import { IBaseEntity } from '@/modules/core/types/common.types';

// Re-export EContentBlockType for external use
export { EContentBlockType } from '@/modules/core/types/record.types';

// Note interface with rich content focus (based on IBaseEntity instead of IRecord)
export interface INote extends IBaseEntity {
  // Database relationship
  databaseId: string;

  // Properties (similar to IRecord but note-specific)
  // Note-specific properties (stored in properties field)
  title: string;
  summary?: string;
  tags: string[];

  // Rich content is the main feature for notes
  content: INoteContentBlock[];

  // Note-specific metadata
  wordCount: number;
  readingTime: number; // in minutes
  lastViewedAt?: Date;
  viewCount: number;

  // Knowledge management features
  linkedNotes: string[]; // IDs of related notes
  backlinks: string[]; // IDs of notes that link to this one
  mentions: string[]; // User IDs mentioned in the note

  // Organization
  isPublished: boolean;
  publishedAt?: Date;
  isBookmarked: boolean;

  // Collaboration
  sharedWith: string[]; // User IDs with access
  allowComments: boolean;

  // AI features
  autoGeneratedSummary?: string;
  extractedKeywords: string[];
  suggestedTags: string[];

  // Additional metadata
  lastEditedAt?: Date;
  lastEditedBy?: string;
  order?: number;

  // Custom properties support
  customFields?: Record<string, any>;
}

// Enhanced content block for notes (extends base record content)
export interface INoteContentBlock {
  id: string;
  type: EContentBlockType;
  content: IRichTextElement[];
  children?: INoteContentBlock[];

  // Block-specific properties
  checked?: boolean; // for to_do
  language?: string; // for code
  caption?: IRichTextElement[]; // for image, video, file
  url?: string; // for image, video, file, bookmark, embed

  // Note-specific enhancements
  collapsed?: boolean; // for toggle blocks
  color?: string; // for callouts
  icon?: string; // for callouts
  level?: number; // for headings (1-6)

  // Metadata
  createdAt: Date;
  createdBy: string;
  lastEditedAt: Date;
  lastEditedBy: string;

  // Collaboration
  comments?: INoteBlockComment[];

  // AI features
  aiSuggestions?: string[];
}

// Enhanced rich text element for notes (standalone interface)
export interface IRichTextElement {
  type: 'text' | 'mention' | 'equation';

  // Text content
  text?: {
    content: string;
    link?: { url: string };
  };

  // Enhanced mentions (includes note mentions)
  mention?: {
    type: 'user' | 'page' | 'database' | 'date' | 'note';
    user?: { id: string; name?: string };
    page?: { id: string; title?: string };
    database?: { id: string; name?: string };
    note?: { id: string; title?: string };
    date?: { start: string; end?: string };
  };

  // Enhanced equations
  equation?: {
    expression: string;
    rendered?: string; // LaTeX rendered result
  };

  // Annotations (all required for consistency)
  annotations: {
    bold: boolean;
    italic: boolean;
    strikethrough: boolean;
    underline: boolean;
    code: boolean;
    color: string;
    backgroundColor?: string;
    fontSize?: 'small' | 'normal' | 'large';
  };

  plain_text: string;
  href?: string;
}

// Note block comment
export interface INoteBlockComment {
  id: string;
  blockId?: string;
  content: string;
  authorId: string;
  createdAt: Date;
  updatedAt: Date;
  parentCommentId?: string;
  replies: INoteBlockComment[];
  reactions: Array<{
    emoji: string;
    userId: string;
    createdAt: Date;
  }>;
  isResolved: boolean;
  resolvedAt?: Date;
  resolvedBy?: string;
}

// Note collaboration
export interface INoteCollaborator {
  userId: string;
  role: ECollaboratorRole;
  addedAt: Date;
  addedBy: string;
}

export enum ECollaboratorRole {
  VIEWER = 'viewer',
  COMMENTER = 'commenter',
  EDITOR = 'editor'
}

// Note template
export interface INoteTemplate {
  id: string;
  name: string;
  description?: string;
  content: INoteContentBlock[];
  tags: string[];
  isPublic: boolean;
  usageCount: number;
  createdBy: string;
  createdAt: Date;
}

// Note statistics
export interface INoteStats {
  total: number;
  published: number;
  drafts: number;
  bookmarked: number;
  totalWordCount: number;
  averageWordCount: number;
  totalReadingTime: number;
  mostUsedTags: Array<{
    tag: string;
    count: number;
  }>;
  recentlyViewed: Array<{
    noteId: string;
    title: string;
    viewedAt: Date;
  }>;
  topNotes: Array<{
    noteId: string;
    title: string;
    viewCount: number;
  }>;
}

// Validation schemas
export const RichTextElementSchema = z.object({
  type: z.enum(['text', 'mention', 'equation']),
  text: z.object({
    content: z.string(),
    link: z.object({ url: z.string().url() }).optional()
  }).optional(),
  mention: z.object({
    type: z.enum(['user', 'page', 'database', 'date', 'note']),
    user: z.object({ id: z.string(), name: z.string() }).optional(),
    page: z.object({ id: z.string(), title: z.string() }).optional(),
    database: z.object({ id: z.string(), name: z.string() }).optional(),
    note: z.object({ id: z.string(), title: z.string() }).optional(),
    date: z.object({
      start: z.string(),
      end: z.string().optional()
    }).optional()
  }).optional(),
  equation: z.object({
    expression: z.string(),
    rendered: z.string().optional()
  }).optional(),
  annotations: z.object({
    bold: z.boolean(),
    italic: z.boolean(),
    strikethrough: z.boolean(),
    underline: z.boolean(),
    code: z.boolean(),
    color: z.string(),
    backgroundColor: z.string().optional(),
    fontSize: z.enum(['small', 'normal', 'large']).optional()
  }),
  plain_text: z.string(),
  href: z.string().url().optional()
});

export const NoteContentBlockSchema: z.ZodType<INoteContentBlock> = z.lazy(() => z.object({
  id: z.string(),
  type: z.nativeEnum(EContentBlockType),
  content: z.array(RichTextElementSchema),
  children: z.array(NoteContentBlockSchema).optional(),
  checked: z.boolean().optional(),
  language: z.string().optional(),
  caption: z.array(RichTextElementSchema).optional(),
  url: z.string().url().optional(),
  collapsed: z.boolean().optional(),
  color: z.string().optional(),
  icon: z.string().optional(),
  level: z.number().min(1).max(6).optional(),
  createdAt: z.date(),
  createdBy: z.string(),
  lastEditedAt: z.date(),
  lastEditedBy: z.string(),
  comments: z.array(z.any()).optional(), // Simplified for now
  aiSuggestions: z.array(z.string()).optional()
}));

export const NoteSchema = z.object({
  id: z.string(),
  databaseId: z.string(),
  title: z.string().min(1).max(500),
  summary: z.string().max(1000).optional(),
  tags: z.array(z.string()).default([]),
  content: z.array(NoteContentBlockSchema).default([]),
  wordCount: z.number().min(0).default(0),
  readingTime: z.number().min(0).default(0),
  lastViewedAt: z.date().optional(),
  viewCount: z.number().min(0).default(0),
  linkedNotes: z.array(z.string()).default([]),
  backlinks: z.array(z.string()).default([]),
  mentions: z.array(z.string()).default([]),
  isPublished: z.boolean().default(false),
  publishedAt: z.date().optional(),
  isBookmarked: z.boolean().default(false),
  sharedWith: z.array(z.string()).default([]),
  allowComments: z.boolean().default(true),
  autoGeneratedSummary: z.string().optional(),
  extractedKeywords: z.array(z.string()).default([]),
  suggestedTags: z.array(z.string()).default([]),
  createdAt: z.date(),
  updatedAt: z.date(),
  createdBy: z.string(),
  updatedBy: z.string().optional()
});

// Request/Response types
export interface ICreateNoteRequest {
  databaseId: string;
  title: string;
  summary?: string;
  tags?: string[];
  content?: INoteContentBlock[];
  isPublished?: boolean;
  allowComments?: boolean;
  customFields?: Record<string, any>;
}

export interface IUpdateNoteRequest {
  title?: string;
  summary?: string;
  tags?: string[];
  isPublished?: boolean;
  isBookmarked?: boolean;
  allowComments?: boolean;
}

export interface IUpdateNoteContentRequest {
  content: INoteContentBlock[];
}

export interface IAddContentBlockRequest {
  type: EContentBlockType;
  content: IRichTextElement[];
  afterBlockId?: string; // Insert after this block
  parentBlockId?: string; // Insert as child of this block

  // Block-specific properties
  checked?: boolean;
  language?: string;
  caption?: IRichTextElement[];
  url?: string;
  collapsed?: boolean;
  color?: string;
  icon?: string;
  level?: number;
}

export interface IUpdateContentBlockRequest {
  content?: IRichTextElement[];
  checked?: boolean;
  language?: string;
  caption?: IRichTextElement[];
  url?: string;
  collapsed?: boolean;
  color?: string;
  icon?: string;
  level?: number;
}

export interface INoteQueryParams {
  databaseId?: string;
  tags?: string[];
  isPublished?: boolean;
  isBookmarked?: boolean;
  search?: string;
  createdBy?: string;
  dateRange?: {
    start: Date;
    end: Date;
  };
  sortBy?: 'title' | 'createdAt' | 'updatedAt' | 'lastViewedAt' | 'viewCount' | 'wordCount';
  sortOrder?: 'asc' | 'desc';
  includeContent?: boolean;
  includeStats?: boolean;
  page?: number;
  limit?: number;
}

export interface INoteResponse extends INote {}

export interface INoteListResponse {
  notes: INoteResponse[];
  total: number;
  page: number;
  limit: number;
  hasNext: boolean;
  hasPrev: boolean;
  stats?: INoteStats;
}

export interface INoteStatsResponse extends INoteStats {}

export interface INoteTemplateResponse extends INoteTemplate {}

// Search types
export interface INoteSearchResult {
  noteId: string;
  title: string;
  summary?: string;
  tags: string[];
  matches: Array<{
    blockId: string;
    blockType: EContentBlockType;
    content: string;
    context: string; // Surrounding text
  }>;
  score: number; // Relevance score
}

export interface INoteSearchResponse {
  results: INoteSearchResult[];
  total: number;
  query: string;
  suggestions?: string[];
}

// Export types
export interface INoteExportOptions {
  format: 'markdown' | 'html' | 'pdf' | 'json';
  includeComments: boolean;
  includeMetadata: boolean;
  template?: string; // For HTML/PDF export
}

// Import types
export interface INoteImportOptions {
  format: 'markdown' | 'html' | 'json';
  preserveFormatting: boolean;
  extractTags: boolean;
  generateSummary: boolean;
}
