openapi: 3.0.0
info:
  title: Second Brain Server API
  description: |
    Comprehensive personal intelligence platform API for knowledge management, creativity, learning, and personal growth.

    ## Features
    - **Stateless Authentication**: JWT-based authentication with no server-side sessions
    - **OAuth Integration**: Google OAuth support with CSRF protection
    - **Database Management**: Create and manage custom databases with flexible schemas
    - **Record Management**: CRUD operations for database records with rich property types
    - **User Management**: Complete user lifecycle management with role-based access control
    - **Rate Limiting**: Built-in rate limiting for security and performance
    - **File Operations**: Import/export data in multiple formats (JSON, CSV, Excel)
    - **Real-time Collaboration**: Share databases with granular permissions

    ## Authentication
    This API uses JWT Bearer tokens for authentication. Include the token in the Authorization header:
    ```
    Authorization: Bearer <your-jwt-token>
    ```

    ## Rate Limiting
    - Login: 5 attempts per 15 minutes
    - Registration: 3 attempts per hour
    - Password Reset: 3 attempts per hour
    - Token Refresh: 10 attempts per 15 minutes
    - OAuth: 20 attempts per 15 minutes
    - General API: 100 requests per 15 minutes

    ## Database Property Types
    - **TEXT**: Single-line text
    - **NUMBER**: Numeric values
    - **SELECT**: Single selection from predefined options
    - **MULTI_SELECT**: Multiple selections from predefined options
    - **DATE**: Date and time values
    - **CHECKBOX**: Boolean values
    - **URL**: Web links
    - **EMAIL**: Email addresses
    - **PHONE**: Phone numbers
    - **RELATION**: Links to records in other databases
    - **FORMULA**: Calculated values based on other properties
    - **ROLLUP**: Aggregated values from related records
    - **CREATED_TIME**: Automatically set creation timestamp
    - **CREATED_BY**: Automatically set creator user
    - **LAST_EDITED_TIME**: Automatically updated timestamp
    - **LAST_EDITED_BY**: Automatically updated editor user
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: http://localhost:5000/api/v1
    description: Development server
  - url: https://your-domain.com/api/v1
    description: Production server
tags:
  - name: System
    description: |
      System-level endpoints for health checks and API information.
      These endpoints provide basic server status and API metadata.
  - name: Authentication
    description: |
      User authentication operations including registration, login, logout, and token management.
      All authentication endpoints use stateless JWT tokens with comprehensive security features.
  - name: OAuth
    description: |
      OAuth authentication flows for third-party providers like Google.
      Includes CSRF protection, secure callback handling, and automatic account linking.
  - name: Password Management
    description: |
      Password-related operations including password change and reset functionality.
      Uses stateless JWT tokens for password reset links with time-based expiration.
  - name: User Management
    description: |
      User profile management and administrative functions.
      Includes profile updates, account management, and user statistics.
  - name: User Administration
    description: |
      Administrative operations for managing users across the platform.
      Requires elevated permissions (moderator/admin roles).
  - name: Database Management
    description: |
      Core database operations including creation, updates, deletion, and configuration.
      Supports flexible schema design with custom properties and views.
  - name: Database Properties
    description: |
      Manage database schema by adding, updating, and removing properties.
      Supports various property types including relations, formulas, and rollups.
  - name: Database Views
    description: |
      Create and manage different views of database data.
      Supports filtering, sorting, grouping, and custom layouts.
  - name: Record Management
    description: |
      CRUD operations for database records with rich property value handling.
      Supports batch operations and complex data types.
  - name: Database Sharing
    description: |
      Share databases with other users and manage access permissions.
      Supports granular permission levels (read, write, admin).
  - name: Data Import/Export
    description: |
      Import and export database data in multiple formats.
      Supports JSON, CSV, and Excel formats with flexible mapping options.
  - name: Database Categories
    description: |
      Organize databases with custom categories for better management.
      Supports category creation, reordering, and hierarchical organization.
  - name: Database Templates
    description: |
      Pre-built database templates for quick database creation.
      Includes templates for project management, CRM, inventory, and content planning.
  - name: Enhanced Database Features
    description: |
      Advanced database features including favorites, access tracking, and enhanced filtering.
      Supports sidebar data generation and improved database organization.
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: 507f1f77bcf86cd799439011
        email:
          type: string
          format: email
          example: user@example.com
        username:
          type: string
          example: john_doe
        role:
          type: string
          enum: [admin, user, moderator]
          example: user
        isActive:
          type: boolean
          example: true
        authProvider:
          type: string
          enum: [LOCAL, GOOGLE]
          example: LOCAL
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        profilePicture:
          type: string
          format: uri
          example: https://example.com/avatar.jpg
        isEmailVerified:
          type: boolean
          example: true
        lastLoginAt:
          type: string
          format: date-time
          example: 2023-01-01T12:00:00Z
        createdAt:
          type: string
          format: date-time
          example: 2023-01-01T00:00:00Z
        updatedAt:
          type: string
          format: date-time
          example: 2023-01-01T00:00:00Z
    AuthResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        refreshToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          example: Str0ngP@ssword
    RegisterRequest:
      type: object
      required:
        - email
        - username
        - password
      properties:
        email:
          type: string
          format: email
          description: Valid email address
          example: user@example.com
        username:
          type: string
          minLength: 3
          maxLength: 30
          pattern: '^[a-zA-Z0-9_]+$'
          description: Username containing only letters, numbers, and underscores
          example: john_doe
        password:
          type: string
          minLength: 8
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$'
          description: Password with at least 8 characters, including uppercase, lowercase, number, and special character
          example: Str0ngP@ssword123!
        firstName:
          type: string
          maxLength: 50
          description: Optional first name
          example: John
        lastName:
          type: string
          maxLength: 50
          description: Optional last name
          example: Doe

    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          description: Valid refresh token obtained during login
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

    ChangePasswordRequest:
      type: object
      required:
        - currentPassword
        - newPassword
      properties:
        currentPassword:
          type: string
          description: Current password for verification
          example: OldP@ssword123!
        newPassword:
          type: string
          minLength: 8
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$'
          description: New password with security requirements
          example: NewP@ssword123!

    ForgotPasswordRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          description: Email address to send password reset link
          example: user@example.com

    ResetPasswordRequest:
      type: object
      required:
        - resetToken
        - newPassword
      properties:
        resetToken:
          type: string
          description: Password reset token from email link
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        newPassword:
          type: string
          minLength: 8
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$'
          description: New password with security requirements
          example: NewP@ssword123!

    GoogleCallbackRequest:
      type: object
      required:
        - code
      properties:
        code:
          type: string
          description: Authorization code from Google OAuth callback
          example: 4/0AX4XfWjYZ...

    TokenResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: JWT access token (expires in 15 minutes)
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    UpdateProfileRequest:
      type: object
      properties:
        firstName:
          type: string
          maxLength: 50
          description: User's first name
          example: John
        lastName:
          type: string
          maxLength: 50
          description: User's last name
          example: Doe
        username:
          type: string
          minLength: 3
          maxLength: 30
          pattern: '^[a-zA-Z0-9_]+$'
          description: Unique username
          example: john_doe_updated
        profilePicture:
          type: string
          format: uri
          description: URL to profile picture
          example: https://example.com/avatar.jpg

    UpdateUserByAdminRequest:
      type: object
      properties:
        firstName:
          type: string
          maxLength: 50
          description: User's first name
          example: John
        lastName:
          type: string
          maxLength: 50
          description: User's last name
          example: Doe
        username:
          type: string
          minLength: 3
          maxLength: 30
          pattern: '^[a-zA-Z0-9_]+$'
          description: Unique username
          example: john_doe_admin
        profilePicture:
          type: string
          format: uri
          description: URL to profile picture
          example: https://example.com/avatar.jpg
        role:
          type: string
          enum: [USER, MODERATOR, ADMIN]
          description: User role
          example: MODERATOR
        isActive:
          type: boolean
          description: Account active status
          example: true

    BulkUpdateUsersRequest:
      type: object
      required:
        - userIds
        - updates
      properties:
        userIds:
          type: array
          items:
            type: string
          minItems: 1
          maxItems: 50
          description: Array of user IDs to update
          example: ["507f1f77bcf86cd799439011", "507f1f77bcf86cd799439012"]
        updates:
          type: object
          properties:
            role:
              type: string
              enum: [USER, MODERATOR, ADMIN]
              description: New role for all users
              example: MODERATOR
            isActive:
              type: boolean
              description: Active status for all users
              example: true
          description: Updates to apply to all specified users

    UserStatsResponse:
      type: object
      properties:
        totalUsers:
          type: integer
          description: Total number of users
          example: 1250
        activeUsers:
          type: integer
          description: Number of active users
          example: 1100
        newUsers:
          type: integer
          description: New users in the specified period
          example: 45
        usersByRole:
          type: object
          description: User count by role
          properties:
            USER:
              type: integer
              example: 1000
            MODERATOR:
              type: integer
              example: 20
            ADMIN:
              type: integer
              example: 5
        usersByProvider:
          type: object
          description: User count by authentication provider
          properties:
            LOCAL:
              type: integer
              example: 800
            GOOGLE:
              type: integer
              example: 450
        recentActivity:
          type: array
          description: Recent login activity
          items:
            type: object
            properties:
              date:
                type: string
                description: Date of activity
                example: 2023-01-15
              count:
                type: integer
                description: Number of logins on this date
                example: 25
    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Operation successful
        data:
          type: object
          description: Response data (varies by endpoint)
        error:
          type: object
          properties:
            message:
              type: string
              example: Error description
            statusCode:
              type: integer
              example: 400
            status:
              type: string
              example: error

    ValidationError:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          properties:
            message:
              type: string
              example: Request body validation failed
            statusCode:
              type: integer
              example: 400
            status:
              type: string
              example: error
            details:
              type: array
              items:
                type: object
                properties:
                  field:
                    type: string
                    example: email
                  message:
                    type: string
                    example: Please provide a valid email address
                  value:
                    type: string
                    example: invalid-email

    RateLimitError:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          properties:
            message:
              type: string
              example: Too many login attempts, please try again later
            statusCode:
              type: integer
              example: 429
            status:
              type: string
              example: error
    PaginatedUsersResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
          description: Array of user objects
        total:
          type: integer
          description: Total number of users matching filters
          example: 150
        totalPages:
          type: integer
          description: Total number of pages
          example: 15
        currentPage:
          type: integer
          description: Current page number
          example: 1

    # Database Schemas
    Database:
      type: object
      properties:
        id:
          type: string
          description: Unique database identifier
          example: 507f1f77bcf86cd799439011
        name:
          type: string
          description: Database name
          example: Project Tasks
        description:
          type: string
          description: Database description
          example: Track project tasks and their progress
        icon:
          type: string
          description: Database icon
          example: 📋
        cover:
          type: string
          format: uri
          description: Database cover image URL
          example: https://example.com/cover.jpg
        workspaceId:
          type: string
          description: Parent workspace ID
          example: 507f1f77bcf86cd799439012
        ownerId:
          type: string
          description: Database owner user ID
          example: 507f1f77bcf86cd799439013
        isPublic:
          type: boolean
          description: Whether database is publicly accessible
          example: false
        isFavorite:
          type: boolean
          description: Whether database is marked as favorite
          example: false
        categoryId:
          type: string
          description: Category ID this database belongs to
          example: 507f1f77bcf86cd799439020
        tags:
          type: array
          items:
            type: string
          description: Database tags for organization
          example: ["work", "project", "urgent"]
        lastAccessedAt:
          type: string
          format: date-time
          description: When database was last accessed
          example: 2023-01-01T10:30:00Z
        accessCount:
          type: integer
          description: Number of times database has been accessed
          example: 42
        properties:
          type: array
          items:
            $ref: '#/components/schemas/DatabaseProperty'
        views:
          type: array
          items:
            $ref: '#/components/schemas/DatabaseView'
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/DatabasePermission'
        createdAt:
          type: string
          format: date-time
          example: 2023-01-01T00:00:00Z
        updatedAt:
          type: string
          format: date-time
          example: 2023-01-01T12:00:00Z

    CreateDatabaseRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: Database name
          example: Project Tasks
        description:
          type: string
          maxLength: 500
          description: Database description
          example: Track project tasks and their progress
        icon:
          type: string
          maxLength: 50
          description: Database icon
          example: 📋
        cover:
          type: string
          format: uri
          description: Database cover image URL
          example: https://example.com/cover.jpg
        workspaceId:
          type: string
          pattern: '^[0-9a-fA-F]{24}$'
          description: Parent workspace ID
          example: 507f1f77bcf86cd799439012
        isPublic:
          type: boolean
          description: Whether database is publicly accessible
          default: false
          example: false
        categoryId:
          type: string
          pattern: '^[0-9a-fA-F]{24}$'
          description: Category ID to assign database to
          example: 507f1f77bcf86cd799439020
        tags:
          type: array
          items:
            type: string
            maxLength: 50
          maxItems: 20
          description: Database tags for organization
          example: ["work", "project"]

    UpdateDatabaseRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: Database name
          example: Updated Project Tasks
        description:
          type: string
          maxLength: 500
          description: Database description
          example: Updated description for project tasks
        icon:
          type: string
          maxLength: 50
          description: Database icon
          example: 📝
        cover:
          type: string
          format: uri
          description: Database cover image URL
          example: https://example.com/new-cover.jpg
        isPublic:
          type: boolean
          description: Whether database is publicly accessible
          example: true
        categoryId:
          type: string
          pattern: '^[0-9a-fA-F]{24}$'
          description: Category ID to assign database to
          example: 507f1f77bcf86cd799439020
        tags:
          type: array
          items:
            type: string
            maxLength: 50
          maxItems: 20
          description: Database tags for organization
          example: ["work", "updated"]

    DatabaseProperty:
      type: object
      properties:
        id:
          type: string
          description: Property identifier
          example: prop_001
        name:
          type: string
          description: Property name
          example: Task Name
        type:
          type: string
          enum: [TEXT, NUMBER, SELECT, MULTI_SELECT, DATE, CHECKBOX, URL, EMAIL, PHONE, RELATION, FORMULA, ROLLUP, CREATED_TIME, CREATED_BY, LAST_EDITED_TIME, LAST_EDITED_BY]
          description: Property type
          example: TEXT
        description:
          type: string
          description: Property description
          example: The name of the task
        required:
          type: boolean
          description: Whether property is required
          example: true
        isVisible:
          type: boolean
          description: Whether property is visible in views
          example: true
        order:
          type: integer
          description: Property display order
          example: 1
        selectOptions:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                example: opt_001
              name:
                type: string
                example: High Priority
              color:
                type: string
                example: "#FF0000"
        relationConfig:
          type: object
          properties:
            relatedDatabaseId:
              type: string
              example: 507f1f77bcf86cd799439014
            relationType:
              type: string
              enum: [ONE_TO_ONE, ONE_TO_MANY, MANY_TO_ONE, MANY_TO_MANY]
              example: MANY_TO_ONE
        formulaConfig:
          type: object
          properties:
            expression:
              type: string
              example: prop("Priority") + " - " + prop("Status")
            returnType:
              type: string
              enum: [TEXT, NUMBER, DATE, CHECKBOX]
              example: TEXT

    CreatePropertyRequest:
      type: object
      required:
        - name
        - type
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: Property name
          example: Task Priority
        type:
          type: string
          enum: [TEXT, NUMBER, SELECT, MULTI_SELECT, DATE, CHECKBOX, URL, EMAIL, PHONE, RELATION, FORMULA, ROLLUP]
          description: Property type
          example: SELECT
        description:
          type: string
          maxLength: 200
          description: Property description
          example: Priority level of the task
        required:
          type: boolean
          description: Whether property is required
          default: false
          example: true
        selectOptions:
          type: array
          items:
            type: object
            required: [id, name, color]
            properties:
              id:
                type: string
                example: opt_001
              name:
                type: string
                example: High
              color:
                type: string
                pattern: '^#[0-9A-Fa-f]{6}$'
                example: "#FF0000"
        relationConfig:
          type: object
          required: [relatedDatabaseId, relationType]
          properties:
            relatedDatabaseId:
              type: string
              pattern: '^[0-9a-fA-F]{24}$'
              example: 507f1f77bcf86cd799439014
            relationType:
              type: string
              enum: [ONE_TO_ONE, ONE_TO_MANY, MANY_TO_ONE, MANY_TO_MANY]
              example: MANY_TO_ONE
        order:
          type: integer
          minimum: 0
          description: Property display order
          example: 1

    UpdatePropertyRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: Property name
          example: Updated Task Name
        description:
          type: string
          maxLength: 200
          description: Property description
          example: Updated priority level of the task
        required:
          type: boolean
          description: Whether property is required
          example: false
        selectOptions:
          type: array
          items:
            type: object
            required: [id, name, color]
            properties:
              id:
                type: string
                example: opt_001
              name:
                type: string
                example: Critical
              color:
                type: string
                pattern: '^#[0-9A-Fa-f]{6}$'
                example: "#8B0000"

    DatabaseView:
      type: object
      properties:
        id:
          type: string
          description: View identifier
          example: view_001
        name:
          type: string
          description: View name
          example: All Tasks
        type:
          type: string
          enum: [TABLE, BOARD, TIMELINE, CALENDAR, GALLERY, LIST]
          description: View type
          example: TABLE
        isDefault:
          type: boolean
          description: Whether this is the default view
          example: true
        filters:
          type: array
          items:
            type: object
            required: [propertyId, operator]
            properties:
              propertyId:
                type: string
                example: prop_001
              operator:
                type: string
                example: contains
              value:
                description: Filter value (type varies)
                example: urgent
        sorts:
          type: array
          items:
            type: object
            required: [propertyId, direction]
            properties:
              propertyId:
                type: string
                example: prop_002
              direction:
                type: string
                enum: [asc, desc]
                example: desc
        groupBy:
          type: string
          description: Property ID to group by
          example: prop_003
        visibleProperties:
          type: array
          items:
            type: string
          description: List of visible property IDs
          example: ["prop_001", "prop_002", "prop_003"]

    CreateViewRequest:
      type: object
      required:
        - name
        - type
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: View name
          example: High Priority Tasks
        type:
          type: string
          enum: [TABLE, BOARD, TIMELINE, CALENDAR, GALLERY, LIST]
          description: View type
          example: BOARD
        isDefault:
          type: boolean
          description: Whether this is the default view
          default: false
          example: false
        filters:
          type: array
          items:
            type: object
            required: [propertyId, operator]
            properties:
              propertyId:
                type: string
                example: prop_priority
              operator:
                type: string
                example: equals
              value:
                description: Filter value
                example: High
        sorts:
          type: array
          items:
            type: object
            required: [propertyId, direction]
            properties:
              propertyId:
                type: string
                example: prop_created
              direction:
                type: string
                enum: [asc, desc]
                example: desc
        visibleProperties:
          type: array
          items:
            type: string
          description: List of visible property IDs
          example: ["prop_001", "prop_002"]

    UpdateViewRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: View name
          example: Updated Task View
        filters:
          type: array
          items:
            type: object
            required: [propertyId, operator]
            properties:
              propertyId:
                type: string
                example: prop_status
              operator:
                type: string
                example: equals
              value:
                description: Filter value
                example: "Completed"
        sorts:
          type: array
          items:
            type: object
            required: [propertyId, direction]
            properties:
              propertyId:
                type: string
                example: prop_priority
              direction:
                type: string
                enum: [asc, desc]
                example: desc
        visibleProperties:
          type: array
          items:
            type: string
          description: List of visible property IDs
          example: ["prop_001", "prop_002"]

    DatabaseRecord:
      type: object
      properties:
        id:
          type: string
          description: Record identifier
          example: 507f1f77bcf86cd799439015
        databaseId:
          type: string
          description: Parent database ID
          example: 507f1f77bcf86cd799439011
        properties:
          type: object
          description: Record property values
          example:
            prop_001: "Complete user authentication"
            prop_002: "High"
            prop_003: true
        createdAt:
          type: string
          format: date-time
          example: 2023-01-01T00:00:00Z
        updatedAt:
          type: string
          format: date-time
          example: 2023-01-01T12:00:00Z
        createdBy:
          type: string
          description: User ID who created the record
          example: 507f1f77bcf86cd799439013

    CreateRecordRequest:
      type: object
      required:
        - properties
      properties:
        properties:
          type: object
          description: Record property values
          example:
            prop_name: "New Task"
            prop_priority: "High"
            prop_completed: false

    UpdateRecordRequest:
      type: object
      required:
        - properties
      properties:
        properties:
          type: object
          description: Record property values to update
          example:
            prop_status: "completed_option_id"
            prop_completed: true

    ShareDatabaseRequest:
      type: object
      required:
        - userId
        - permission
      properties:
        userId:
          type: string
          description: User ID to share with
          example: user123
        permission:
          type: string
          enum: [read, write, admin]
          description: Permission level
          example: write

    DatabasePermission:
      type: object
      properties:
        userId:
          type: string
          description: User ID
          example: 507f1f77bcf86cd799439013
        permission:
          type: string
          enum: [read, write, admin]
          description: Permission level
          example: write
        grantedAt:
          type: string
          format: date-time
          example: 2023-01-01T00:00:00Z

    # Database Category Schemas
    DatabaseCategory:
      type: object
      properties:
        id:
          type: string
          description: Category identifier
          example: 507f1f77bcf86cd799439020
        name:
          type: string
          description: Category name
          example: Work Projects
        description:
          type: string
          description: Category description
          example: Databases related to work projects and tasks
        icon:
          type: string
          description: Category icon
          example: 💼
        color:
          type: string
          description: Category color (hex format)
          example: "#3B82F6"
        ownerId:
          type: string
          description: Category owner user ID
          example: 507f1f77bcf86cd799439013
        isDefault:
          type: boolean
          description: Whether this is the default category
          example: false
        sortOrder:
          type: integer
          description: Sort order for category display
          example: 0
        createdAt:
          type: string
          format: date-time
          example: 2023-01-01T00:00:00Z
        updatedAt:
          type: string
          format: date-time
          example: 2023-01-01T12:00:00Z

    CreateCategoryRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: Category name
          example: Personal Projects
        description:
          type: string
          maxLength: 500
          description: Category description
          example: Personal side projects and hobbies
        icon:
          type: string
          maxLength: 50
          description: Category icon
          example: 🏠
        color:
          type: string
          pattern: '^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$'
          description: Category color (hex format)
          example: "#10B981"
        sortOrder:
          type: integer
          minimum: 0
          description: Sort order for category display
          example: 1

    UpdateCategoryRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: Category name
          example: Updated Personal Projects
        description:
          type: string
          maxLength: 500
          description: Category description
          example: Updated description for personal projects
        icon:
          type: string
          maxLength: 50
          description: Category icon
          example: 🎯
        color:
          type: string
          pattern: '^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$'
          description: Category color (hex format)
          example: "#8B5CF6"
        sortOrder:
          type: integer
          minimum: 0
          description: Sort order for category display
          example: 2

    ReorderCategoriesRequest:
      type: object
      required:
        - categoryIds
      properties:
        categoryIds:
          type: array
          items:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
          minItems: 1
          maxItems: 50
          description: Array of category IDs in desired order
          example: ["507f1f77bcf86cd799439020", "507f1f77bcf86cd799439021"]

    # Database Template Schemas
    DatabaseTemplate:
      type: object
      properties:
        id:
          type: string
          description: Template identifier
          example: project-management
        name:
          type: string
          description: Template name
          example: Project Management
        description:
          type: string
          description: Template description
          example: Track projects, tasks, and team assignments with status updates
        icon:
          type: string
          description: Template icon
          example: 📋
        category:
          type: string
          description: Template category
          example: Productivity
        tags:
          type: array
          items:
            type: string
          description: Template tags
          example: ["project", "task", "team", "management"]
        properties:
          type: array
          items:
            $ref: '#/components/schemas/DatabaseProperty'
          description: Pre-configured properties for the template

    # Enhanced Database Schemas
    SidebarData:
      type: object
      properties:
        categories:
          type: array
          items:
            $ref: '#/components/schemas/DatabaseCategory'
          description: User's database categories
        recentDatabases:
          type: array
          items:
            $ref: '#/components/schemas/Database'
          description: Recently accessed databases (last 5)
        favoriteDatabases:
          type: array
          items:
            $ref: '#/components/schemas/Database'
          description: User's favorite databases
        myDatabases:
          type: array
          items:
            $ref: '#/components/schemas/Database'
          description: Databases owned by the user
        sharedDatabases:
          type: array
          items:
            $ref: '#/components/schemas/Database'
          description: Databases shared with the user
        totalCount:
          type: integer
          description: Total number of databases
          example: 25

    DatabaseListResponse:
      type: object
      properties:
        databases:
          type: array
          items:
            $ref: '#/components/schemas/Database'
          description: List of databases
        sidebarData:
          $ref: '#/components/schemas/SidebarData'
          description: Sidebar organization data (optional)

    ToggleFavoriteRequest:
      type: object
      required:
        - isFavorite
      properties:
        isFavorite:
          type: boolean
          description: Whether to mark as favorite
          example: true

    MoveToCategoryRequest:
      type: object
      properties:
        categoryId:
          type: string
          pattern: '^[0-9a-fA-F]{24}$'
          description: Category ID to move database to (null for uncategorized)
          example: 507f1f77bcf86cd799439020

    # Workspace Schemas
    Workspace:
      type: object
      properties:
        id:
          type: string
          description: Unique workspace identifier
          example: 507f1f77bcf86cd799439030
        name:
          type: string
          description: Workspace name
          example: Team Alpha
        description:
          type: string
          description: Workspace description
          example: Main workspace for Team Alpha projects
        icon:
          type: string
          description: Workspace icon
          example: 🚀
        cover:
          type: string
          format: uri
          description: Workspace cover image URL
          example: https://example.com/workspace-cover.jpg
        ownerId:
          type: string
          description: Workspace owner user ID
          example: 507f1f77bcf86cd799439013
        members:
          type: array
          items:
            $ref: '#/components/schemas/WorkspaceMember'
          description: Workspace members
        isPublic:
          type: boolean
          description: Whether workspace is publicly accessible
          example: false
        allowMemberInvites:
          type: boolean
          description: Whether members can invite others
          example: true
        defaultDatabasePermission:
          type: string
          enum: [read, write, admin]
          description: Default permission for new databases
          example: read
        color:
          type: string
          pattern: '^#[0-9A-Fa-f]{6}$'
          description: Workspace color theme
          example: "#3B82F6"
        tags:
          type: array
          items:
            type: string
          description: Workspace tags
          example: ["development", "team-alpha"]
        databaseCount:
          type: integer
          description: Number of databases in workspace
          example: 15
        memberCount:
          type: integer
          description: Number of members in workspace
          example: 8
        lastActivityAt:
          type: string
          format: date-time
          description: Last activity timestamp
          example: 2023-01-01T10:30:00Z
        createdAt:
          type: string
          format: date-time
          example: 2023-01-01T00:00:00Z
        updatedAt:
          type: string
          format: date-time
          example: 2023-01-01T12:00:00Z
        createdBy:
          type: string
          description: User ID who created the workspace
          example: 507f1f77bcf86cd799439013
        lastEditedBy:
          type: string
          description: User ID who last edited the workspace
          example: 507f1f77bcf86cd799439013

    WorkspaceMember:
      type: object
      properties:
        userId:
          type: string
          description: Member user ID
          example: 507f1f77bcf86cd799439014
        role:
          type: string
          enum: [owner, admin, editor, viewer]
          description: Member role in workspace
          example: editor
        joinedAt:
          type: string
          format: date-time
          description: When member joined workspace
          example: 2023-01-01T08:00:00Z
        invitedBy:
          type: string
          description: User ID who invited this member
          example: 507f1f77bcf86cd799439013
        user:
          type: object
          description: User details (populated in responses)
          properties:
            id:
              type: string
              example: 507f1f77bcf86cd799439014
            email:
              type: string
              example: member@example.com
            username:
              type: string
              example: team_member
            firstName:
              type: string
              example: John
            lastName:
              type: string
              example: Doe
            profilePicture:
              type: string
              format: uri
              example: https://example.com/avatar.jpg

    CreateWorkspaceRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: Workspace name
          example: Team Alpha
        description:
          type: string
          maxLength: 500
          description: Workspace description
          example: Main workspace for Team Alpha projects
        icon:
          type: string
          maxLength: 50
          description: Workspace icon
          example: 🚀
        cover:
          type: string
          format: uri
          maxLength: 500
          description: Workspace cover image URL
          example: https://example.com/cover.jpg
        isPublic:
          type: boolean
          description: Whether workspace is publicly accessible
          default: false
          example: false
        allowMemberInvites:
          type: boolean
          description: Whether members can invite others
          default: true
          example: true
        defaultDatabasePermission:
          type: string
          enum: [read, write, admin]
          description: Default permission for new databases
          default: read
          example: read
        color:
          type: string
          pattern: '^#[0-9A-Fa-f]{6}$'
          description: Workspace color theme
          example: "#3B82F6"
        tags:
          type: array
          items:
            type: string
            maxLength: 50
          maxItems: 20
          description: Workspace tags
          example: ["development", "team-alpha"]

    UpdateWorkspaceRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: Workspace name
          example: Updated Team Alpha
        description:
          type: string
          maxLength: 500
          description: Workspace description
          example: Updated description for Team Alpha
        icon:
          type: string
          maxLength: 50
          description: Workspace icon
          example: 🎯
        cover:
          type: string
          format: uri
          maxLength: 500
          description: Workspace cover image URL
          example: https://example.com/new-cover.jpg
        isPublic:
          type: boolean
          description: Whether workspace is publicly accessible
          example: true
        allowMemberInvites:
          type: boolean
          description: Whether members can invite others
          example: false
        defaultDatabasePermission:
          type: string
          enum: [read, write, admin]
          description: Default permission for new databases
          example: write
        color:
          type: string
          pattern: '^#[0-9A-Fa-f]{6}$'
          description: Workspace color theme
          example: "#10B981"
        tags:
          type: array
          items:
            type: string
            maxLength: 50
          maxItems: 20
          description: Workspace tags
          example: ["development", "updated"]

    InviteMemberRequest:
      type: object
      required:
        - role
      properties:
        email:
          type: string
          format: email
          description: Email of user to invite
          example: newmember@example.com
        userId:
          type: string
          pattern: '^[0-9a-fA-F]{24}$'
          description: User ID to invite (alternative to email)
          example: 507f1f77bcf86cd799439015
        role:
          type: string
          enum: [admin, editor, viewer]
          description: Role to assign to new member
          example: editor
        message:
          type: string
          maxLength: 500
          description: Optional invitation message
          example: Welcome to our team workspace!

    UpdateMemberRoleRequest:
      type: object
      required:
        - role
      properties:
        role:
          type: string
          enum: [admin, editor, viewer]
          description: New role for the member
          example: admin

    WorkspaceListResponse:
      type: object
      properties:
        workspaces:
          type: array
          items:
            $ref: '#/components/schemas/Workspace'
          description: List of workspaces
        total:
          type: integer
          description: Total number of workspaces
          example: 25
        totalPages:
          type: integer
          description: Total number of pages
          example: 3
        currentPage:
          type: integer
          description: Current page number
          example: 1
        hasNextPage:
          type: boolean
          description: Whether there are more pages
          example: true
        hasPrevPage:
          type: boolean
          description: Whether there are previous pages
          example: false

    WorkspaceMembersListResponse:
      type: object
      properties:
        members:
          type: array
          items:
            $ref: '#/components/schemas/WorkspaceMember'
          description: List of workspace members
        total:
          type: integer
          description: Total number of members
          example: 8
        totalPages:
          type: integer
          description: Total number of pages
          example: 1
        currentPage:
          type: integer
          description: Current page number
          example: 1
        hasNextPage:
          type: boolean
          description: Whether there are more pages
          example: false
        hasPrevPage:
          type: boolean
          description: Whether there are previous pages
          example: false

    WorkspacePermissions:
      type: object
      properties:
        canView:
          type: boolean
          description: Can view workspace
          example: true
        canEdit:
          type: boolean
          description: Can edit workspace
          example: true
        canAdmin:
          type: boolean
          description: Can admin workspace
          example: false
        canDelete:
          type: boolean
          description: Can delete workspace
          example: false
        canInviteMembers:
          type: boolean
          description: Can invite new members
          example: true
        canManageMembers:
          type: boolean
          description: Can manage existing members
          example: false
        canCreateDatabases:
          type: boolean
          description: Can create databases in workspace
          example: true
        role:
          type: string
          enum: [owner, admin, editor, viewer]
          description: User's role in workspace
          example: editor

    WorkspaceStats:
      type: object
      properties:
        totalWorkspaces:
          type: integer
          description: Total workspaces user has access to
          example: 12
        ownedWorkspaces:
          type: integer
          description: Workspaces owned by user
          example: 5
        memberWorkspaces:
          type: integer
          description: Workspaces user is member of
          example: 7
        publicWorkspaces:
          type: integer
          description: Public workspaces available
          example: 25
        totalDatabases:
          type: integer
          description: Total databases across user's workspaces
          example: 45
        totalMembers:
          type: integer
          description: Total members across owned workspaces
          example: 23
        recentActivity:
          type: array
          items:
            type: object
            properties:
              workspaceId:
                type: string
                example: 507f1f77bcf86cd799439030
              workspaceName:
                type: string
                example: Team Alpha
              activityType:
                type: string
                enum: [created, updated, member_added, member_removed, database_added]
                example: member_added
              timestamp:
                type: string
                format: date-time
                example: 2023-01-01T10:30:00Z
          description: Recent workspace activity

paths:
  /:
    get:
      tags: [System]
      summary: API welcome message
      description: |
        Returns basic API information and available endpoints.
        Useful for API discovery and health verification.
      operationId: getApiInfo
      responses:
        '200':
          description: API information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Welcome to Second Brain Server API
                  version:
                    type: string
                    example: v1
                  environment:
                    type: string
                    example: production
                  timestamp:
                    type: string
                    format: date-time
                    example: 2023-01-01T12:00:00Z
                  endpoints:
                    type: object
                    properties:
                      health:
                        type: string
                        example: /health
                      api:
                        type: string
                        example: /api/v1
                      docs:
                        type: string
                        example: /api/v1/docs
                  documentation:
                    type: string
                    example: /api/v1/docs

  /health:
    get:
      tags: [System]
      summary: Health check endpoint
      description: |
        Returns server health status including uptime, memory usage, and environment information.
        Used for monitoring and load balancer health checks.
      operationId: healthCheck
      responses:
        '200':
          description: Server is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Server is running!
                  timestamp:
                    type: string
                    format: date-time
                    example: 2023-01-01T12:00:00Z
                  environment:
                    type: string
                    example: production
                  version:
                    type: string
                    example: 1.0.0
                  uptime:
                    type: number
                    description: Server uptime in seconds
                    example: 86400
                  memory:
                    type: object
                    properties:
                      rss:
                        type: number
                        description: Resident Set Size in bytes
                        example: 52428800
                      heapTotal:
                        type: number
                        description: Total heap size in bytes
                        example: 20971520
                      heapUsed:
                        type: number
                        description: Used heap size in bytes
                        example: 15728640
                      external:
                        type: number
                        description: External memory usage in bytes
                        example: 1048576

  /api:
    get:
      tags: [System]
      summary: API status endpoint
      description: |
        Returns API status and available endpoints.
        Alternative health check endpoint with API-specific information.
      operationId: getApiStatus
      responses:
        '200':
          description: API is running
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: API is running!
                  version:
                    type: string
                    example: v1
                  endpoints:
                    type: object
                    properties:
                      health:
                        type: string
                        example: /health
                      api:
                        type: string
                        example: /api/v1
                      docs:
                        type: string
                        example: /api/v1/docs
                  timestamp:
                    type: string
                    format: date-time
                    example: 2023-01-01T12:00:00Z

  /auth/sign-up:
    post:
      tags: [Authentication]
      summary: Register a new user account
      description: |
        Create a new user account with email and password. The system will:
        - Validate email format and uniqueness
        - Enforce strong password requirements
        - Hash the password securely
        - Return user data without password

        **Rate Limit**: 3 requests per hour per IP
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            examples:
              basic_registration:
                summary: Basic registration
                value:
                  email: john.doe@example.com
                  username: john_doe
                  password: SecureP@ss123!
              full_registration:
                summary: Registration with names
                value:
                  email: jane.smith@example.com
                  username: jane_smith
                  password: MyStr0ng@Pass!
                  firstName: Jane
                  lastName: Smith
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'
              examples:
                success:
                  summary: Successful registration
                  value:
                    success: true
                    message: User registered successfully
                    data:
                      id: 507f1f77bcf86cd799439011
                      email: john.doe@example.com
                      username: john_doe
                      role: USER
                      isActive: true
                      authProvider: LOCAL
                      isEmailVerified: false
                      createdAt: 2023-01-01T00:00:00Z
        '400':
          description: Validation error or user already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
              examples:
                validation_error:
                  summary: Validation failed
                  value:
                    success: false
                    error:
                      message: Request body validation failed
                      statusCode: 400
                      status: error
                      details:
                        - field: email
                          message: Please provide a valid email address
                          value: invalid-email
                duplicate_user:
                  summary: User already exists
                  value:
                    success: false
                    error:
                      message: Duplicate field value email = 'user@example.com'. Please use another value!
                      statusCode: 400
                      status: error
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'

  /auth/sign-in:
    post:
      tags: [Authentication]
      summary: Login with email and password
      description: |
        Authenticate user with email and password. Returns JWT tokens for stateless authentication.

        **Features**:
        - Stateless JWT authentication
        - Access token (15 minutes expiry)
        - Refresh token (7 days expiry)
        - Account status validation
        - Provider-specific login handling

        **Rate Limit**: 5 requests per 15 minutes per IP+email
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              login:
                summary: Standard login
                value:
                  email: user@example.com
                  password: MyP@ssword123!
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/AuthResponse'
              examples:
                success:
                  summary: Successful login
                  value:
                    success: true
                    message: Login successful
                    data:
                      user:
                        id: 507f1f77bcf86cd799439011
                        email: user@example.com
                        username: john_doe
                        role: USER
                        isActive: true
                        authProvider: LOCAL
                      accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                      refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '401':
          description: Invalid credentials or account issues
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                invalid_credentials:
                  summary: Invalid email or password
                  value:
                    success: false
                    error:
                      message: Invalid email or password
                      statusCode: 401
                      status: error
                account_deactivated:
                  summary: Account deactivated
                  value:
                    success: false
                    error:
                      message: Account is deactivated. Please contact support.
                      statusCode: 401
                      status: error
                oauth_account:
                  summary: OAuth account
                  value:
                    success: false
                    error:
                      message: Please use Google login for this account
                      statusCode: 401
                      status: error
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'

  /auth/refresh-token:
    post:
      tags: [Authentication]
      summary: Refresh access token
      description: |
        Generate a new access token using a valid refresh token. This endpoint:
        - Validates the refresh token signature and expiration
        - Checks if the user still exists and is active
        - Issues a new access token (15 minutes expiry)
        - Maintains stateless authentication

        **Rate Limit**: 10 requests per 15 minutes per IP
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
            examples:
              refresh:
                summary: Token refresh
                value:
                  refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/TokenResponse'
              examples:
                success:
                  summary: Successful token refresh
                  value:
                    success: true
                    message: Token refreshed successfully
                    data:
                      accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '401':
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                invalid_token:
                  summary: Invalid refresh token
                  value:
                    success: false
                    error:
                      message: Invalid or expired refresh token
                      statusCode: 401
                      status: error
                user_inactive:
                  summary: User not found or inactive
                  value:
                    success: false
                    error:
                      message: User not found or inactive
                      statusCode: 401
                      status: error
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'

  /auth/change-password:
    post:
      tags: [Password Management]
      summary: Change user password
      description: |
        Change the current user's password. Requires authentication and current password verification.

        **Requirements**:
        - Must be authenticated
        - Must provide current password
        - New password must meet security requirements
        - Only available for LOCAL auth provider accounts
      operationId: changePassword
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
            examples:
              change_password:
                summary: Change password
                value:
                  currentPassword: OldP@ssword123!
                  newPassword: NewSecureP@ss456!
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                success:
                  summary: Password changed
                  value:
                    success: true
                    message: Password changed successfully
        '400':
          description: Validation error or OAuth account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                oauth_account:
                  summary: OAuth account error
                  value:
                    success: false
                    error:
                      message: Cannot change password for OAuth accounts
                      statusCode: 400
                      status: error
        '401':
          description: Unauthorized or incorrect current password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                wrong_password:
                  summary: Incorrect current password
                  value:
                    success: false
                    error:
                      message: Current password is incorrect
                      statusCode: 401
                      status: error

  /auth/forgot-password:
    post:
      tags: [Password Management]
      summary: Request password reset
      description: |
        Send a password reset email with a secure JWT token link. The system:
        - Validates email format
        - Checks if user exists (doesn't reveal if user doesn't exist)
        - Generates a stateless JWT reset token (10 minutes expiry)
        - Sends email with reset link
        - Only available for LOCAL auth provider accounts

        **Rate Limit**: 3 requests per hour per IP+email
      operationId: forgotPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
            examples:
              forgot_password:
                summary: Request password reset
                value:
                  email: user@example.com
      responses:
        '200':
          description: Password reset email sent (if user exists)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                success:
                  summary: Reset email sent
                  value:
                    success: true
                    message: If an account with that email exists, a password reset link has been sent
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'

  /auth/reset-password:
    post:
      tags: [Password Management]
      summary: Reset password with token
      description: |
        Reset password using the token from the reset email. The system:
        - Validates the JWT reset token
        - Checks token expiration (10 minutes)
        - Verifies user exists and email matches
        - Updates password securely
        - Invalidates the reset token

        **Rate Limit**: 3 requests per hour per IP
      operationId: resetPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
            examples:
              reset_password:
                summary: Reset password
                value:
                  resetToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  newPassword: NewSecureP@ss789!
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                success:
                  summary: Password reset
                  value:
                    success: true
                    message: Password reset successfully
        '400':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                invalid_token:
                  summary: Invalid reset token
                  value:
                    success: false
                    error:
                      message: Invalid or expired reset token
                      statusCode: 400
                      status: error
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'

  /auth/logout:
    post:
      tags: [Authentication]
      summary: Logout current session
      description: |
        Logout from the current session. In a stateless system, this endpoint:
        - Logs the logout event for security monitoring
        - Returns success (client should discard tokens)
        - No server-side token invalidation (stateless design)

        **Note**: Client must discard JWT tokens locally
      operationId: logout
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logged out successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                success:
                  summary: Logout successful
                  value:
                    success: true
                    message: Logged out successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /auth/logout-all:
    post:
      tags: [Authentication]
      summary: Logout all devices
      description: |
        Logout from all devices/sessions. In a stateless system, this endpoint:
        - Logs the logout event for security monitoring
        - Returns success (client should discard tokens)
        - No server-side token invalidation (stateless design)

        **Note**: Client must discard JWT tokens locally on all devices
      operationId: logoutAll
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logged out from all devices
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                success:
                  summary: Logout all successful
                  value:
                    success: true
                    message: Logged out from all devices successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /auth/me:
    get:
      tags: [Authentication]
      summary: Get current user profile
      description: |
        Retrieve the authenticated user's profile information.
        Returns user data without sensitive information like password.
      operationId: getCurrentUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'
              examples:
                success:
                  summary: User profile
                  value:
                    success: true
                    message: Profile retrieved successfully
                    data:
                      id: 507f1f77bcf86cd799439011
                      email: user@example.com
                      username: john_doe
                      firstName: John
                      lastName: Doe
                      role: USER
                      isActive: true
                      authProvider: LOCAL
                      isEmailVerified: true
                      lastLoginAt: 2023-01-01T12:00:00Z
                      createdAt: 2023-01-01T00:00:00Z
                      updatedAt: 2023-01-01T12:00:00Z
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /auth/google:
    get:
      tags: [OAuth]
      summary: Initiate Google OAuth login
      description: |
        Redirect to Google OAuth authorization page. This endpoint:
        - Generates a secure state parameter (JWT token)
        - Redirects to Google OAuth with proper parameters
        - Includes CSRF protection via state parameter
        - Requests necessary scopes (profile, email)

        **Rate Limit**: 20 requests per 15 minutes per IP
      operationId: googleLogin
      responses:
        '302':
          description: Redirect to Google OAuth
          headers:
            Location:
              description: Google OAuth authorization URL
              schema:
                type: string
                example: https://accounts.google.com/o/oauth2/v2/auth?client_id=...
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'

  /auth/google/callback:
    get:
      tags: [OAuth]
      summary: Google OAuth callback (GET)
      description: |
        Handle Google OAuth callback with authorization code. This endpoint:
        - Validates the state parameter for CSRF protection
        - Exchanges authorization code for access token
        - Retrieves user profile from Google
        - Creates or updates user account
        - Redirects to frontend with JWT tokens

        **Rate Limit**: 20 requests per 15 minutes per IP
      operationId: googleCallback
      parameters:
        - name: code
          in: query
          description: Authorization code from Google
          schema:
            type: string
            example: 4/0AX4XfWjYZ...
        - name: state
          in: query
          description: State parameter for CSRF protection
          schema:
            type: string
            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        - name: error
          in: query
          description: Error from Google OAuth (if any)
          schema:
            type: string
            example: access_denied
      responses:
        '302':
          description: Redirect to frontend with tokens or error
          headers:
            Location:
              description: Frontend URL with tokens or error
              schema:
                type: string
                example: https://frontend.com/auth/callback?token=...&refreshToken=...
        '400':
          description: Invalid state or OAuth error
          content:
            text/html:
              schema:
                type: string
                description: Redirect to frontend error page
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'

    post:
      tags: [OAuth]
      summary: Google OAuth callback (POST)
      description: |
        Alternative POST endpoint for Google OAuth callback handling.
        Used when the frontend needs to handle the OAuth flow programmatically.

        **Rate Limit**: 20 requests per 15 minutes per IP
      operationId: googleLoginSuccess
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleCallbackRequest'
            examples:
              callback:
                summary: Google OAuth callback
                value:
                  code: 4/0AX4XfWjYZ...
      responses:
        '200':
          description: OAuth login successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/AuthResponse'
              examples:
                success:
                  summary: OAuth login successful
                  value:
                    success: true
                    message: Google login successful
                    data:
                      user:
                        id: 507f1f77bcf86cd799439011
                        email: user@gmail.com
                        username: user_gmail
                        firstName: John
                        lastName: Doe
                        role: USER
                        isActive: true
                        authProvider: GOOGLE
                        profilePicture: https://lh3.googleusercontent.com/...
                        isEmailVerified: true
                      accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                      refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '400':
          description: Invalid authorization code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Account deactivated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'

  /users:
    get:
      tags: [Users]
      summary: Get all users with filtering and pagination
      description: |
        Retrieve a paginated list of users with advanced filtering options.

        **Features**:
        - Search by email, username, first name, or last name
        - Filter by role, auth provider, and active status
        - Sort by various fields with ascending/descending order
        - Pagination support

        **Required Permission**: Moderator or Admin
      operationId: getUsers
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
            example: 1
        - name: limit
          in: query
          description: Number of users per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
            example: 10
        - name: search
          in: query
          description: Search term for email, username, first name, or last name
          schema:
            type: string
            example: john
        - name: role
          in: query
          description: Filter by user role
          schema:
            type: string
            enum: [USER, MODERATOR, ADMIN]
            example: USER
        - name: authProvider
          in: query
          description: Filter by authentication provider
          schema:
            type: string
            enum: [LOCAL, GOOGLE]
            example: LOCAL
        - name: isActive
          in: query
          description: Filter by active status
          schema:
            type: boolean
            example: true
        - name: sortBy
          in: query
          description: Field to sort by
          schema:
            type: string
            enum: [createdAt, updatedAt, lastLoginAt, email, username]
            default: createdAt
            example: createdAt
        - name: sortOrder
          in: query
          description: Sort order
          schema:
            type: string
            enum: [asc, desc]
            default: desc
            example: desc
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          users:
                            type: array
                            items:
                              $ref: '#/components/schemas/User'
                          total:
                            type: integer
                            description: Total number of users matching filters
                            example: 150
                          totalPages:
                            type: integer
                            description: Total number of pages
                            example: 15
                          currentPage:
                            type: integer
                            description: Current page number
                            example: 1
              examples:
                success:
                  summary: Users list with pagination
                  value:
                    success: true
                    message: Users retrieved successfully
                    data:
                      users:
                        - id: 507f1f77bcf86cd799439011
                          email: john.doe@example.com
                          username: john_doe
                          firstName: John
                          lastName: Doe
                          role: USER
                          isActive: true
                          authProvider: LOCAL
                          isEmailVerified: true
                          createdAt: 2023-01-01T00:00:00Z
                          updatedAt: 2023-01-01T12:00:00Z
                          lastLoginAt: 2023-01-01T12:00:00Z
                      total: 150
                      totalPages: 15
                      currentPage: 1
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Forbidden (Moderator/Admin only)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /users/profile:
    get:
      tags: [Users]
      summary: Get current user profile
      description: |
        Retrieve the authenticated user's profile information.
        Returns user data without sensitive information.
      operationId: getUserProfile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

    put:
      tags: [Users]
      summary: Update user profile
      description: |
        Update the authenticated user's profile information.
        Users can only update their own profile.
      operationId: updateUserProfile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  maxLength: 50
                  example: John
                lastName:
                  type: string
                  maxLength: 50
                  example: Doe
                username:
                  type: string
                  minLength: 3
                  maxLength: 30
                  pattern: '^[a-zA-Z0-9_]+$'
                  example: john_doe_updated
                profilePicture:
                  type: string
                  format: uri
                  example: https://example.com/new-avatar.jpg
            examples:
              update_profile:
                summary: Update profile
                value:
                  firstName: John
                  lastName: Doe
                  username: john_doe_updated
                  profilePicture: https://example.com/new-avatar.jpg
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

    delete:
      tags: [Users]
      summary: Delete user account
      description: |
        Delete the authenticated user's account permanently.
        This action cannot be undone.
      operationId: deleteUserAccount
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Account deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /users/stats:
    get:
      tags: [Users]
      summary: Get user statistics
      description: |
        Retrieve comprehensive user statistics for administrative purposes.

        **Features**:
        - Total and active user counts
        - New user registrations in period
        - User distribution by role and auth provider
        - Recent activity trends

        **Required Permission**: Admin only
      operationId: getUserStats
      security:
        - bearerAuth: []
      parameters:
        - name: period
          in: query
          description: Time period for statistics
          schema:
            type: string
            enum: [day, week, month, year]
            default: month
            example: month
        - name: startDate
          in: query
          description: Start date for custom period (ISO 8601)
          schema:
            type: string
            format: date-time
            example: 2023-01-01T00:00:00Z
        - name: endDate
          in: query
          description: End date for custom period (ISO 8601)
          schema:
            type: string
            format: date-time
            example: 2023-12-31T23:59:59Z
      responses:
        '200':
          description: Statistics retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          totalUsers:
                            type: integer
                            example: 1250
                          activeUsers:
                            type: integer
                            example: 1100
                          newUsers:
                            type: integer
                            example: 45
                          usersByRole:
                            type: object
                            properties:
                              USER:
                                type: integer
                                example: 1000
                              MODERATOR:
                                type: integer
                                example: 20
                              ADMIN:
                                type: integer
                                example: 5
                          usersByProvider:
                            type: object
                            properties:
                              LOCAL:
                                type: integer
                                example: 800
                              GOOGLE:
                                type: integer
                                example: 450
                          recentActivity:
                            type: array
                            items:
                              type: object
                              properties:
                                date:
                                  type: string
                                  example: 2023-01-15
                                count:
                                  type: integer
                                  example: 25
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Forbidden (Admin only)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /users/bulk-update:
    patch:
      tags: [Users]
      summary: Bulk update users
      description: |
        Update multiple users at once with the same changes.

        **Features**:
        - Update role for multiple users
        - Activate/deactivate multiple users
        - Batch processing with error handling
        - Self-modification protection

        **Required Permission**: Admin only
      operationId: bulkUpdateUsers
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userIds
                - updates
              properties:
                userIds:
                  type: array
                  items:
                    type: string
                  minItems: 1
                  maxItems: 50
                  description: Array of user IDs to update
                  example: ["507f1f77bcf86cd799439011", "507f1f77bcf86cd799439012"]
                updates:
                  type: object
                  properties:
                    role:
                      type: string
                      enum: [USER, MODERATOR, ADMIN]
                      example: MODERATOR
                    isActive:
                      type: boolean
                      example: true
                  description: Updates to apply to all specified users
            examples:
              promote_to_moderator:
                summary: Promote users to moderator
                value:
                  userIds: ["507f1f77bcf86cd799439011", "507f1f77bcf86cd799439012"]
                  updates:
                    role: MODERATOR
              deactivate_users:
                summary: Deactivate multiple users
                value:
                  userIds: ["507f1f77bcf86cd799439013", "507f1f77bcf86cd799439014"]
                  updates:
                    isActive: false
      responses:
        '200':
          description: Bulk update completed
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          updated:
                            type: integer
                            description: Number of users successfully updated
                            example: 2
                          errors:
                            type: array
                            items:
                              type: string
                            description: List of errors encountered
                            example: []
        '400':
          description: Validation error or self-modification attempt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Forbidden (Admin only)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /users/{id}:
    get:
      tags: [Users]
      summary: Get user details by ID
      description: |
        Retrieve detailed information about a specific user by their ID.

        **Required Permission**: Moderator or Admin
      operationId: getUserById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            example: 507f1f77bcf86cd799439011
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'
              examples:
                success:
                  summary: User details
                  value:
                    success: true
                    message: User details retrieved successfully
                    data:
                      id: 507f1f77bcf86cd799439011
                      email: user@example.com
                      username: john_doe
                      firstName: John
                      lastName: Doe
                      role: USER
                      isActive: true
                      authProvider: LOCAL
                      isEmailVerified: true
                      createdAt: 2023-01-01T00:00:00Z
                      updatedAt: 2023-01-01T12:00:00Z
                      lastLoginAt: 2023-01-01T12:00:00Z
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Forbidden (Moderator/Admin only)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

    put:
      tags: [Users]
      summary: Update user by ID (Admin)
      description: |
        Update any user's information by their ID. Admin-only operation.

        **Features**:
        - Update user profile information
        - Change user role
        - Activate/deactivate user account
        - Self-modification protection

        **Required Permission**: Admin only
      operationId: updateUserById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID to update
          schema:
            type: string
            example: 507f1f77bcf86cd799439011
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  maxLength: 50
                  example: John
                lastName:
                  type: string
                  maxLength: 50
                  example: Doe
                username:
                  type: string
                  minLength: 3
                  maxLength: 30
                  pattern: '^[a-zA-Z0-9_]+$'
                  example: john_doe_admin
                profilePicture:
                  type: string
                  format: uri
                  example: https://example.com/avatar.jpg
                role:
                  type: string
                  enum: [USER, MODERATOR, ADMIN]
                  example: MODERATOR
                isActive:
                  type: boolean
                  example: true
            examples:
              promote_user:
                summary: Promote user to moderator
                value:
                  role: MODERATOR
              update_profile:
                summary: Update user profile
                value:
                  firstName: John
                  lastName: Doe
                  username: john_doe_updated
              deactivate_user:
                summary: Deactivate user
                value:
                  isActive: false
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'
        '400':
          description: Validation error or self-modification attempt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Forbidden (Admin only)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

    delete:
      tags: [Users]
      summary: Delete user by ID (Admin)
      description: |
        Permanently delete a user account by ID. Admin-only operation.

        **Warning**: This action cannot be undone.
        **Protection**: Cannot delete own account.

        **Required Permission**: Admin only
      operationId: deleteUserById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID to delete
          schema:
            type: string
            example: 507f1f77bcf86cd799439011
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                success:
                  summary: User deleted
                  value:
                    success: true
                    message: User deleted successfully
        '400':
          description: Cannot delete own account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                self_deletion:
                  summary: Self-deletion attempt
                  value:
                    success: false
                    error:
                      message: Cannot delete your own account
                      statusCode: 400
                      status: error
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Forbidden (Admin only)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /users/{id}/status:
    patch:
      tags: [Users]
      summary: Toggle user active status
      description: |
        Toggle a user's active status (activate/deactivate).

        **Features**:
        - Activate inactive users
        - Deactivate active users
        - Self-modification protection

        **Required Permission**: Admin only
      operationId: toggleUserStatus
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID to toggle status
          schema:
            type: string
            example: 507f1f77bcf86cd799439011
      responses:
        '200':
          description: User status toggled successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'
              examples:
                activated:
                  summary: User activated
                  value:
                    success: true
                    message: User activated successfully
                    data:
                      id: 507f1f77bcf86cd799439011
                      isActive: true
                deactivated:
                  summary: User deactivated
                  value:
                    success: true
                    message: User deactivated successfully
                    data:
                      id: 507f1f77bcf86cd799439011
                      isActive: false
        '400':
          description: Cannot change own status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Forbidden (Admin only)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /users/{id}/role:
    patch:
      tags: [Users]
      summary: Update user role
      description: |
        Update a user's role (USER, MODERATOR, ADMIN).

        **Features**:
        - Promote/demote users
        - Role-based access control
        - Self-modification protection

        **Required Permission**: Admin only
      operationId: updateUserRole
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID to update role
          schema:
            type: string
            example: 507f1f77bcf86cd799439011
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - role
              properties:
                role:
                  type: string
                  enum: [USER, MODERATOR, ADMIN]
                  description: New role for the user
                  example: MODERATOR
            examples:
              promote_to_moderator:
                summary: Promote to moderator
                value:
                  role: MODERATOR
              promote_to_admin:
                summary: Promote to admin
                value:
                  role: ADMIN
              demote_to_user:
                summary: Demote to user
                value:
                  role: USER
      responses:
        '200':
          description: User role updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'
              examples:
                success:
                  summary: Role updated
                  value:
                    success: true
                    message: User role updated successfully
                    data:
                      id: 507f1f77bcf86cd799439011
                      role: MODERATOR
        '400':
          description: Cannot change own role or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Forbidden (Admin only)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  # Database Management Endpoints
  /databases:
    get:
      tags: [Enhanced Database Features]
      summary: Get user's databases with enhanced filtering
      description: |
        Retrieve databases accessible to the authenticated user with advanced filtering and organization.

        **Features**:
        - Enhanced filtering by category, favorites, tags
        - Search functionality
        - Sidebar data generation for dynamic navigation
        - Sorting and pagination
        - Access tracking integration

        **Query Parameters**:
        - **includeSidebarData**: Include organized sidebar data
        - **categoryId**: Filter by specific category
        - **isFavorite**: Show only favorite databases
        - **tags**: Filter by tags (comma-separated)
        - **search**: Search in name and description
        - **sortBy**: Sort by name, createdAt, updatedAt, lastAccessedAt
        - **sortOrder**: asc or desc

        **Required Permission**: Authenticated user
      operationId: getDatabases
      security:
        - bearerAuth: []
      parameters:
        - name: includeSidebarData
          in: query
          description: Include sidebar organization data
          schema:
            type: boolean
            default: false
            example: true
        - name: categoryId
          in: query
          description: Filter by category ID
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
            example: 507f1f77bcf86cd799439020
        - name: isFavorite
          in: query
          description: Filter by favorite status
          schema:
            type: boolean
            example: true
        - name: tags
          in: query
          description: Filter by tags (comma-separated)
          schema:
            type: string
            example: "work,project,urgent"
        - name: search
          in: query
          description: Search in database name and description
          schema:
            type: string
            example: "project management"
        - name: sortBy
          in: query
          description: Sort field
          schema:
            type: string
            enum: [name, createdAt, updatedAt, lastAccessedAt]
            default: updatedAt
            example: name
        - name: sortOrder
          in: query
          description: Sort order
          schema:
            type: string
            enum: [asc, desc]
            default: desc
            example: asc
        - name: workspaceId
          in: query
          description: Filter by workspace ID
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
            example: 507f1f77bcf86cd799439012
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
            example: 1
        - name: limit
          in: query
          description: Number of databases per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
            example: 20
      responses:
        '200':
          description: Databases retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/DatabaseListResponse'
              examples:
                with_sidebar:
                  summary: Response with sidebar data
                  value:
                    success: true
                    message: Databases retrieved successfully
                    data:
                      databases:
                        - id: 507f1f77bcf86cd799439011
                          name: Project Tasks
                          description: Track project tasks and progress
                          icon: 📋
                          isFavorite: true
                          categoryId: 507f1f77bcf86cd799439020
                          tags: ["work", "project"]
                          lastAccessedAt: 2023-01-01T10:30:00Z
                          accessCount: 42
                      sidebarData:
                        categories:
                          - id: 507f1f77bcf86cd799439020
                            name: Work Projects
                            icon: 💼
                            color: "#3B82F6"
                        recentDatabases: []
                        favoriteDatabases: []
                        myDatabases: []
                        sharedDatabases: []
                        totalCount: 25
                basic:
                  summary: Basic response without sidebar
                  value:
                    success: true
                    message: Databases retrieved successfully
                    data:
                      databases:
                        - id: 507f1f77bcf86cd799439011
                          name: Project Tasks
                          description: Track project tasks and progress
                          icon: 📋
                          isFavorite: false
                          tags: ["work"]
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

    post:
      tags: [Databases]
      summary: Create a new database
      description: |
        Create a new database with specified properties.

        **Features**:
        - Creates database with default view
        - Sets creator as owner
        - Supports workspace assignment
        - Configurable privacy settings

        **Required Permission**: Authenticated user
      operationId: createDatabase
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDatabaseRequest'
            examples:
              basic_database:
                summary: Basic database
                value:
                  name: Project Tasks
                  description: Track project tasks and progress
                  icon: 📋
              workspace_database:
                summary: Workspace database
                value:
                  name: Team Goals
                  description: Track team objectives and key results
                  workspaceId: 507f1f77bcf86cd799439012
                  isPublic: false
      responses:
        '201':
          description: Database created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Database'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Insufficient permissions for workspace
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /databases/{id}:
    get:
      tags: [Databases]
      summary: Get database details
      description: |
        Retrieve detailed information about a specific database.

        **Features**:
        - Returns complete database structure
        - Includes properties and views
        - Shows permission information
        - Includes usage statistics

        **Required Permission**: Read access to database
      operationId: getDatabaseById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Database ID
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
            example: 507f1f77bcf86cd799439011
      responses:
        '200':
          description: Database retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Database'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Database not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

    put:
      tags: [Databases]
      summary: Update database
      description: |
        Update an existing database's properties.

        **Features**:
        - Update name, description, icon, cover
        - Change privacy settings
        - Modify workspace assignment
        - Preserve existing properties and views

        **Required Permission**: Write access to database
      operationId: updateDatabase
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Database ID
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
            example: 507f1f77bcf86cd799439011
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDatabaseRequest'
            examples:
              update_name:
                summary: Update name and description
                value:
                  name: Updated Project Tasks
                  description: Updated description for project tracking
              change_privacy:
                summary: Change privacy settings
                value:
                  isPublic: true
      responses:
        '200':
          description: Database updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Database'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Database not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

    delete:
      tags: [Databases]
      summary: Delete database
      description: |
        Permanently delete a database and all its data.

        **Warning**: This action cannot be undone!

        **Features**:
        - Deletes database and all records
        - Removes all properties and views
        - Clears all permissions
        - Notifies shared users

        **Required Permission**: Admin access to database
      operationId: deleteDatabase
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Database ID
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
            example: 507f1f77bcf86cd799439011
      responses:
        '200':
          description: Database deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Database not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  # Property Management Endpoints
  /databases/{id}/properties:
    post:
      tags: [Database Properties]
      summary: Add property to database
      description: |
        Add a new property (column) to a database.

        **Features**:
        - Support for all property types
        - Configurable validation rules
        - Default value assignment
        - Automatic indexing for performance

        **Property Types**:
        - TEXT, NUMBER, DATE, BOOLEAN, CHECKBOX
        - SELECT, MULTI_SELECT with custom options
        - EMAIL, PHONE, URL with validation
        - FILE, RELATION for complex data
        - FORMULA, ROLLUP for computed values
        - CREATED_TIME, LAST_EDITED_TIME, CREATED_BY, LAST_EDITED_BY

        **Required Permission**: Write access to database
      operationId: addProperty
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Database ID
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
            example: 507f1f77bcf86cd799439011
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePropertyRequest'
            examples:
              text_property:
                summary: Text property
                value:
                  name: Task Name
                  type: TEXT
                  required: true
              select_property:
                summary: Select property with options
                value:
                  name: Priority
                  type: SELECT
                  selectOptions:
                    - name: High
                      color: "#FF0000"
                    - name: Medium
                      color: "#FFA500"
                    - name: Low
                      color: "#00FF00"
              number_property:
                summary: Number property
                value:
                  name: Estimated Hours
                  type: NUMBER
                  defaultValue: 0
      responses:
        '201':
          description: Property added successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Database'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Database not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /databases/{id}/properties/{propertyId}:
    put:
      tags: [Database Properties]
      summary: Update database property
      description: |
        Update an existing property in a database.

        **Features**:
        - Modify property name and settings
        - Update validation rules
        - Change default values
        - Preserve existing data when possible

        **Note**: Changing property type may affect existing data

        **Required Permission**: Write access to database
      operationId: updateProperty
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Database ID
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
            example: 507f1f77bcf86cd799439011
        - name: propertyId
          in: path
          required: true
          description: Property ID
          schema:
            type: string
            example: prop_001
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePropertyRequest'
            examples:
              rename_property:
                summary: Rename property
                value:
                  name: Updated Task Name
              add_options:
                summary: Add select options
                value:
                  selectOptions:
                    - name: Critical
                      color: "#8B0000"
                    - name: High
                      color: "#FF0000"
                    - name: Medium
                      color: "#FFA500"
                    - name: Low
                      color: "#00FF00"
      responses:
        '200':
          description: Property updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Database'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Property or database not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

    delete:
      tags: [Database Properties]
      summary: Delete database property
      description: |
        Delete a property from a database.

        **Warning**: This will permanently delete the property and all its data!

        **Features**:
        - Removes property from database schema
        - Deletes all property data from records
        - Updates views that reference the property
        - Cannot be undone

        **Required Permission**: Write access to database
      operationId: deleteProperty
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Database ID
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
            example: 507f1f77bcf86cd799439011
        - name: propertyId
          in: path
          required: true
          description: Property ID
          schema:
            type: string
            example: prop_001
      responses:
        '200':
          description: Property deleted successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Database'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Property or database not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  # View Management Endpoints
  /databases/{id}/views:
    post:
      tags: [Database Views]
      summary: Add view to database
      description: |
        Create a new view for a database.

        **Features**:
        - Multiple view types (table, board, calendar, gallery)
        - Custom filtering and sorting
        - Property visibility control
        - Grouping and aggregation

        **View Types**:
        - **TABLE**: Traditional spreadsheet-like view
        - **BOARD**: Kanban board grouped by select property
        - **CALENDAR**: Calendar view for date properties
        - **GALLERY**: Card-based view for visual content
        - **LIST**: Simple list view

        **Required Permission**: Write access to database
      operationId: addView
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Database ID
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
            example: 507f1f77bcf86cd799439011
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateViewRequest'
            examples:
              table_view:
                summary: Table view
                value:
                  name: All Tasks
                  type: TABLE
                  visibleProperties: ["prop_001", "prop_002", "prop_003"]
              board_view:
                summary: Kanban board view
                value:
                  name: Task Board
                  type: BOARD
                  groupBy: prop_status
                  visibleProperties: ["prop_001", "prop_002"]
              calendar_view:
                summary: Calendar view
                value:
                  name: Due Dates
                  type: CALENDAR
                  dateProperty: prop_due_date
      responses:
        '201':
          description: View added successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Database'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Database not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /databases/{id}/views/{viewId}:
    put:
      tags: [Database Views]
      summary: Update database view
      description: |
        Update an existing view in a database.

        **Features**:
        - Modify view name and type
        - Update filters and sorting
        - Change property visibility
        - Adjust grouping settings

        **Required Permission**: Write access to database
      operationId: updateView
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Database ID
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
            example: 507f1f77bcf86cd799439011
        - name: viewId
          in: path
          required: true
          description: View ID
          schema:
            type: string
            example: view_001
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateViewRequest'
            examples:
              rename_view:
                summary: Rename view
                value:
                  name: Updated Task View
              add_filters:
                summary: Add filters
                value:
                  filters:
                    - propertyId: prop_status
                      operator: equals
                      value: "In Progress"
              update_sorting:
                summary: Update sorting
                value:
                  sorts:
                    - propertyId: prop_due_date
                      direction: asc
                    - propertyId: prop_priority
                      direction: desc
      responses:
        '200':
          description: View updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Database'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: View or database not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

    delete:
      tags: [Database Views]
      summary: Delete database view
      description: |
        Delete a view from a database.

        **Note**: Cannot delete the last view in a database.

        **Features**:
        - Removes view configuration
        - Preserves underlying data
        - Updates user preferences
        - Maintains data integrity

        **Required Permission**: Write access to database
      operationId: deleteView
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Database ID
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
            example: 507f1f77bcf86cd799439011
        - name: viewId
          in: path
          required: true
          description: View ID
          schema:
            type: string
            example: view_001
      responses:
        '200':
          description: View deleted successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Database'
        '400':
          description: Cannot delete last view
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: View or database not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  # Record Management Endpoints
  /databases/{id}/records:
    post:
      tags: [Database Records]
      summary: Create database record
      description: |
        Create a new record in a database.

        **Features**:
        - Validates property types and constraints
        - Applies default values
        - Triggers computed properties (formulas, rollups)
        - Maintains referential integrity

        **Property Value Types**:
        - TEXT, EMAIL, PHONE, URL: string values
        - NUMBER: numeric values
        - BOOLEAN, CHECKBOX: boolean values
        - DATE: ISO date strings
        - SELECT: option ID strings
        - MULTI_SELECT: array of option IDs
        - FILE: array of file objects
        - RELATION: array of related record IDs

        **Required Permission**: Write access to database
      operationId: createRecord
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Database ID
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
            example: 507f1f77bcf86cd799439011
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRecordRequest'
            examples:
              basic_record:
                summary: Basic task record
                value:
                  properties:
                    prop_name: "Complete project documentation"
                    prop_priority: "high_option_id"
                    prop_due_date: "2023-12-31T23:59:59Z"
                    prop_completed: false
              complex_record:
                summary: Complex record with relations
                value:
                  properties:
                    prop_title: "Design Review Meeting"
                    prop_attendees: ["user_001", "user_002"]
                    prop_tags: ["design", "review", "meeting"]
                    prop_estimated_hours: 2.5
      responses:
        '201':
          description: Record created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/DatabaseRecord'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Database not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

    get:
      tags: [Database Records]
      summary: Get database records
      description: |
        Retrieve records from a database with advanced filtering, sorting, and pagination.

        **Features**:
        - Advanced filtering with multiple operators
        - Multi-property sorting
        - Pagination with cursor support
        - Search across text properties
        - Grouping and aggregation
        - View-based filtering

        **Filter Operators**:
        - **Text**: equals, not_equals, contains, does_not_contain, starts_with, ends_with, is_empty, is_not_empty
        - **Number**: equals, not_equals, greater_than, less_than, greater_than_or_equal, less_than_or_equal, is_empty, is_not_empty
        - **Date**: equals, not_equals, before, after, on_or_before, on_or_after, past_week, past_month, past_year, next_week, next_month, next_year
        - **Boolean/Checkbox**: equals, not_equals
        - **Select**: equals, not_equals, is_empty, is_not_empty
        - **Multi-Select**: contains, does_not_contain, contains_all, is_empty, is_not_empty

        **Required Permission**: Read access to database
      operationId: getRecords
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Database ID
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
            example: 507f1f77bcf86cd799439011
        - name: viewId
          in: query
          description: View ID to apply view-specific filters
          schema:
            type: string
            example: view_001
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
            example: 1
        - name: limit
          in: query
          description: Number of records per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
            example: 20
        - name: search
          in: query
          description: Search term to filter records
          schema:
            type: string
            example: "project"
        - name: searchProperties
          in: query
          description: Comma-separated list of property IDs to search in
          schema:
            type: string
            example: "prop_001,prop_002"
        - name: groupBy
          in: query
          description: Property ID to group records by
          schema:
            type: string
            example: "prop_status"
        - name: filters
          in: query
          description: JSON string of filter conditions
          schema:
            type: string
            example: '[{"propertyId":"prop_status","operator":"equals","value":"active"}]'
        - name: sorts
          in: query
          description: JSON string of sort conditions
          schema:
            type: string
            example: '[{"propertyId":"prop_due_date","direction":"asc"}]'
      responses:
        '200':
          description: Records retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          records:
                            type: array
                            items:
                              $ref: '#/components/schemas/DatabaseRecord'
                          total:
                            type: integer
                            description: Total number of records
                            example: 150
                          totalPages:
                            type: integer
                            description: Total number of pages
                            example: 8
                          currentPage:
                            type: integer
                            description: Current page number
                            example: 1
                          hasNextPage:
                            type: boolean
                            description: Whether there are more pages
                            example: true
                          hasPreviousPage:
                            type: boolean
                            description: Whether there are previous pages
                            example: false
                          groupedData:
                            type: object
                            description: Grouped data when groupBy is specified
                            additionalProperties:
                              type: array
                              items:
                                $ref: '#/components/schemas/DatabaseRecord'
        '400':
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Database not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /databases/{id}/records/{recordId}:
    get:
      tags: [Database Records]
      summary: Get database record by ID
      description: |
        Retrieve a specific record from a database.

        **Features**:
        - Returns complete record data
        - Includes computed property values
        - Shows related record information
        - Provides audit trail information

        **Required Permission**: Read access to database
      operationId: getRecordById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Database ID
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
            example: 507f1f77bcf86cd799439011
        - name: recordId
          in: path
          required: true
          description: Record ID
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
            example: 507f1f77bcf86cd799439015
      responses:
        '200':
          description: Record retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/DatabaseRecord'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Record or database not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

    put:
      tags: [Database Records]
      summary: Update database record
      description: |
        Update an existing record in a database.

        **Features**:
        - Partial updates supported
        - Validates property constraints
        - Updates computed properties
        - Maintains audit trail
        - Triggers relation updates

        **Required Permission**: Write access to database
      operationId: updateRecord
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Database ID
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
            example: 507f1f77bcf86cd799439011
        - name: recordId
          in: path
          required: true
          description: Record ID
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
            example: 507f1f77bcf86cd799439015
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRecordRequest'
            examples:
              partial_update:
                summary: Partial property update
                value:
                  properties:
                    prop_status: "completed_option_id"
                    prop_completed: true
              complete_update:
                summary: Multiple property update
                value:
                  properties:
                    prop_name: "Updated task name"
                    prop_priority: "high_option_id"
                    prop_notes: "Additional notes added"
                    prop_estimated_hours: 4.0
      responses:
        '200':
          description: Record updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/DatabaseRecord'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Record or database not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

    delete:
      tags: [Database Records]
      summary: Delete database record
      description: |
        Delete a record from a database.

        **Warning**: This action cannot be undone!

        **Features**:
        - Permanently removes record
        - Updates related records
        - Cleans up file references
        - Maintains referential integrity

        **Required Permission**: Write access to database
      operationId: deleteRecord
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Database ID
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
            example: 507f1f77bcf86cd799439011
        - name: recordId
          in: path
          required: true
          description: Record ID
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
            example: 507f1f77bcf86cd799439015
      responses:
        '200':
          description: Record deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Record or database not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  # Permission Management Endpoints
  /databases/{id}/share:
    post:
      tags: [Database Permissions]
      summary: Share database with user
      description: |
        Grant access to a database for another user.

        **Features**:
        - Grant read, write, or admin permissions
        - Send notification to shared user
        - Manage team collaboration
        - Audit permission changes

        **Permission Levels**:
        - **READ**: View database and records only
        - **WRITE**: Read + create/edit records and views
        - **ADMIN**: Write + manage properties, permissions, and delete database

        **Required Permission**: Admin access to database
      operationId: shareDatabase
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Database ID
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
            example: 507f1f77bcf86cd799439011
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShareDatabaseRequest'
            examples:
              read_access:
                summary: Grant read access
                value:
                  userId: 507f1f77bcf86cd799439013
                  permission: read
              write_access:
                summary: Grant write access
                value:
                  userId: 507f1f77bcf86cd799439014
                  permission: write
              admin_access:
                summary: Grant admin access
                value:
                  userId: 507f1f77bcf86cd799439015
                  permission: admin
      responses:
        '200':
          description: Database shared successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Database'
        '400':
          description: Validation error or user already has access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Database or user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /databases/{id}/share/{targetUserId}:
    delete:
      tags: [Database Permissions]
      summary: Remove database access
      description: |
        Remove a user's access to a database.

        **Features**:
        - Revoke all permissions for user
        - Send notification to affected user
        - Maintain audit trail
        - Preserve data integrity

        **Note**: Cannot remove access for database owner

        **Required Permission**: Admin access to database
      operationId: removeDatabaseAccess
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Database ID
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
            example: 507f1f77bcf86cd799439011
        - name: targetUserId
          in: path
          required: true
          description: User ID to remove access for
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
            example: 507f1f77bcf86cd799439013
      responses:
        '200':
          description: Database access removed successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Database'
        '400':
          description: Cannot remove owner access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Database or user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  # Export/Import Endpoints
  /databases/{id}/export:
    get:
      tags: [Database Export/Import]
      summary: Export database data
      description: |
        Export database records in various formats.

        **Features**:
        - Multiple export formats (JSON, CSV, Excel)
        - View-based filtering
        - Property selection
        - Custom filters and sorting
        - Bulk data export

        **Export Formats**:
        - **JSON**: Complete data with metadata
        - **CSV**: Comma-separated values for spreadsheets
        - **XLSX**: Excel format with formatting

        **Required Permission**: Read access to database
      operationId: exportDatabase
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Database ID
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
            example: 507f1f77bcf86cd799439011
        - name: format
          in: query
          description: Export format
          required: true
          schema:
            type: string
            enum: [json, csv, xlsx]
            example: json
        - name: viewId
          in: query
          description: View ID to apply view-specific filters
          schema:
            type: string
            example: view_001
        - name: includeProperties
          in: query
          description: Comma-separated list of property IDs to include
          schema:
            type: string
            example: "prop_001,prop_002,prop_003"
        - name: filters
          in: query
          description: JSON string of filter conditions
          schema:
            type: string
            example: '[{"propertyId":"prop_status","operator":"equals","value":"active"}]'
      responses:
        '200':
          description: Data exported successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Database exported successfully
                  data:
                    type: object
                    description: Exported data structure
            text/csv:
              schema:
                type: string
                description: CSV formatted data
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
                description: Excel file
        '400':
          description: Invalid export parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Database not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /databases/{id}/import:
    post:
      tags: [Database Export/Import]
      summary: Import data into database
      description: |
        Import data from files into a database.

        **Features**:
        - Multiple import formats (JSON, CSV, Excel)
        - Automatic property creation
        - Property mapping configuration
        - Data validation and error reporting
        - Bulk data import

        **Import Formats**:
        - **JSON**: Structured data with property mapping
        - **CSV**: Comma-separated values with header mapping
        - **XLSX**: Excel files with sheet processing

        **Import Process**:
        1. File validation and parsing
        2. Property type detection
        3. Data transformation and validation
        4. Record creation with error handling
        5. Summary report with success/error counts

        **Required Permission**: Write access to database
      operationId: importData
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Database ID
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
            example: 507f1f77bcf86cd799439011
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: File to import (JSON, CSV, or Excel)
                format:
                  type: string
                  enum: [json, csv, xlsx]
                  default: csv
                  description: Import format
                createMissingProperties:
                  type: boolean
                  default: false
                  description: Whether to create missing properties automatically
                propertyMapping:
                  type: string
                  description: JSON string mapping file columns to property IDs
                  example: '{"Name":"prop_001","Priority":"prop_002"}'
            examples:
              csv_import:
                summary: CSV file import
                value:
                  format: csv
                  createMissingProperties: true
              excel_import:
                summary: Excel file import with mapping
                value:
                  format: xlsx
                  createMissingProperties: false
                  propertyMapping: '{"Task Name":"prop_001","Due Date":"prop_002"}'
      responses:
        '200':
          description: Data imported successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          imported:
                            type: integer
                            description: Number of records successfully imported
                            example: 45
                          errors:
                            type: array
                            items:
                              type: string
                            description: List of import errors
                            example: ["Row 3: Invalid date format", "Row 7: Missing required field"]
        '400':
          description: Invalid file or import parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Database not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '413':
          description: File too large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  # Enhanced Database Features
  /databases/{id}/favorite:
    put:
      tags: [Enhanced Database Features]
      summary: Toggle database favorite status
      description: |
        Mark or unmark a database as favorite for quick access.

        **Features**:
        - Toggle favorite status
        - Affects sidebar organization
        - User-specific favorites
        - Quick access filtering

        **Required Permission**: Database owner or admin
      operationId: toggleDatabaseFavorite
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Database ID
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
            example: 507f1f77bcf86cd799439011
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ToggleFavoriteRequest'
            examples:
              mark_favorite:
                summary: Mark as favorite
                value:
                  isFavorite: true
              unmark_favorite:
                summary: Remove from favorites
                value:
                  isFavorite: false
      responses:
        '200':
          description: Favorite status updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Database'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Database not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /databases/{id}/category:
    put:
      tags: [Enhanced Database Features]
      summary: Move database to category
      description: |
        Move a database to a specific category or remove from category.

        **Features**:
        - Assign to category
        - Remove from category (set to null)
        - Category-based organization
        - Affects sidebar grouping

        **Required Permission**: Database owner or admin
      operationId: moveDatabaseToCategory
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Database ID
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
            example: 507f1f77bcf86cd799439011
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoveToCategoryRequest'
            examples:
              move_to_category:
                summary: Move to category
                value:
                  categoryId: 507f1f77bcf86cd799439020
              remove_from_category:
                summary: Remove from category
                value:
                  categoryId: null
      responses:
        '200':
          description: Database moved to category successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Database'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Database or category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /databases/{id}/access:
    post:
      tags: [Enhanced Database Features]
      summary: Track database access
      description: |
        Record database access for analytics and recent databases tracking.

        **Features**:
        - Updates lastAccessedAt timestamp
        - Increments access count
        - Affects "Recent" databases list
        - Analytics tracking

        **Required Permission**: Database read access
      operationId: trackDatabaseAccess
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Database ID
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
            example: 507f1f77bcf86cd799439011
      responses:
        '200':
          description: Database access tracked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Database not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  # Database Categories
  /categories:
    get:
      tags: [Database Categories]
      summary: Get user's database categories
      description: |
        Retrieve all database categories for the authenticated user.

        **Features**:
        - User-specific categories
        - Includes default category
        - Sorted by sortOrder
        - Category metadata

        **Required Permission**: Authenticated user
      operationId: getUserCategories
      security:
        - bearerAuth: []
      parameters:
        - name: includeDefault
          in: query
          description: Include default category in results
          schema:
            type: boolean
            default: true
            example: true
      responses:
        '200':
          description: Categories retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/DatabaseCategory'
              examples:
                success:
                  summary: User categories
                  value:
                    success: true
                    message: Categories retrieved successfully
                    data:
                      - id: 507f1f77bcf86cd799439020
                        name: Work Projects
                        description: Work-related databases
                        icon: 💼
                        color: "#3B82F6"
                        ownerId: 507f1f77bcf86cd799439013
                        isDefault: false
                        sortOrder: 0
                        createdAt: 2023-01-01T00:00:00Z
                        updatedAt: 2023-01-01T00:00:00Z
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

    post:
      tags: [Database Categories]
      summary: Create a new database category
      description: |
        Create a new category for organizing databases.

        **Features**:
        - Custom category creation
        - Icon and color customization
        - Automatic sort order assignment
        - User-specific categories

        **Required Permission**: Authenticated user
      operationId: createCategory
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCategoryRequest'
            examples:
              work_category:
                summary: Work category
                value:
                  name: Work Projects
                  description: Databases for work-related projects
                  icon: 💼
                  color: "#3B82F6"
              personal_category:
                summary: Personal category
                value:
                  name: Personal
                  description: Personal databases and projects
                  icon: 🏠
                  color: "#10B981"
                  sortOrder: 1
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/DatabaseCategory'
        '400':
          description: Validation error or duplicate category name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /categories/{id}:
    get:
      tags: [Database Categories]
      summary: Get category by ID
      description: |
        Retrieve a specific database category by its ID.

        **Features**:
        - Category details
        - Owner verification
        - Category metadata

        **Required Permission**: Category owner
      operationId: getCategoryById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Category ID
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
            example: 507f1f77bcf86cd799439020
      responses:
        '200':
          description: Category retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/DatabaseCategory'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

    put:
      tags: [Database Categories]
      summary: Update category
      description: |
        Update an existing database category.

        **Features**:
        - Update category properties
        - Icon and color changes
        - Sort order modification
        - Name uniqueness validation

        **Required Permission**: Category owner
      operationId: updateCategory
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Category ID
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
            example: 507f1f77bcf86cd799439020
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCategoryRequest'
            examples:
              update_name:
                summary: Update category name
                value:
                  name: Updated Work Projects
                  description: Updated description for work projects
              update_appearance:
                summary: Update appearance
                value:
                  icon: 🎯
                  color: "#8B5CF6"
                  sortOrder: 2
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/DatabaseCategory'
        '400':
          description: Validation error or duplicate category name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

    delete:
      tags: [Database Categories]
      summary: Delete category
      description: |
        Delete a database category and move associated databases to default category.

        **Features**:
        - Safe category deletion
        - Automatic database reassignment
        - Cannot delete default category
        - Cascade handling

        **Required Permission**: Category owner
      operationId: deleteCategory
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Category ID
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
            example: 507f1f77bcf86cd799439020
      responses:
        '200':
          description: Category deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Insufficient permissions or cannot delete default category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /categories/reorder:
    put:
      tags: [Database Categories]
      summary: Reorder categories
      description: |
        Update the sort order of multiple categories at once.

        **Features**:
        - Batch reordering
        - Maintains category hierarchy
        - Updates sortOrder values
        - Atomic operation

        **Required Permission**: Category owner (for all categories)
      operationId: reorderCategories
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReorderCategoriesRequest'
            examples:
              reorder:
                summary: Reorder categories
                value:
                  categoryIds:
                    - 507f1f77bcf86cd799439021
                    - 507f1f77bcf86cd799439020
                    - 507f1f77bcf86cd799439022
      responses:
        '200':
          description: Categories reordered successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/DatabaseCategory'
        '400':
          description: Validation error or invalid category IDs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  # Database Templates
  /templates:
    get:
      tags: [Database Templates]
      summary: Get all database templates
      description: |
        Retrieve all available database templates for quick database creation.

        **Features**:
        - Pre-built templates
        - Template categories
        - Property configurations
        - Template metadata

        **Templates Available**:
        - Project Management
        - Customer Relationship Management (CRM)
        - Inventory Management
        - Content Calendar

        **Required Permission**: Authenticated user
      operationId: getAllTemplates
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Templates retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/DatabaseTemplate'
              examples:
                success:
                  summary: Available templates
                  value:
                    success: true
                    message: Database templates retrieved successfully
                    data:
                      - id: project-management
                        name: Project Management
                        description: Track projects, tasks, and team assignments with status updates
                        icon: 📋
                        category: Productivity
                        tags: ["project", "task", "team", "management"]
                        properties: []
                      - id: crm
                        name: Customer Relationship Management
                        description: Manage customer contacts, deals, and communication history
                        icon: 👥
                        category: Business
                        tags: ["crm", "customer", "sales", "contact"]
                        properties: []
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /templates/search:
    get:
      tags: [Database Templates]
      summary: Search database templates
      description: |
        Search for database templates by name, description, or tags.

        **Features**:
        - Text-based search
        - Search in name, description, and tags
        - Case-insensitive matching
        - Partial matching support

        **Required Permission**: Authenticated user
      operationId: searchTemplates
      security:
        - bearerAuth: []
      parameters:
        - name: q
          in: query
          required: true
          description: Search query
          schema:
            type: string
            minLength: 1
            example: "project management"
      responses:
        '200':
          description: Templates search completed
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/DatabaseTemplate'
        '400':
          description: Search query is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /templates/{id}:
    get:
      tags: [Database Templates]
      summary: Get template by ID
      description: |
        Retrieve a specific database template by its ID.

        **Features**:
        - Template details
        - Property configurations
        - Template metadata
        - Ready for database creation

        **Required Permission**: Authenticated user
      operationId: getTemplateById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Template ID
          schema:
            type: string
            example: project-management
      responses:
        '200':
          description: Template retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/DatabaseTemplate'
        '404':
          description: Template not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /templates/category/{category}:
    get:
      tags: [Database Templates]
      summary: Get templates by category
      description: |
        Retrieve database templates filtered by category.

        **Features**:
        - Category-based filtering
        - Template grouping
        - Category organization
        - Template discovery

        **Available Categories**:
        - Productivity
        - Business
        - Marketing
        - Personal

        **Required Permission**: Authenticated user
      operationId: getTemplatesByCategory
      security:
        - bearerAuth: []
      parameters:
        - name: category
          in: path
          required: true
          description: Template category
          schema:
            type: string
            example: Productivity
      responses:
        '200':
          description: Templates retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/DatabaseTemplate'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  # Additional Missing Endpoints
  /auth/google/test-config:
    get:
      tags: [OAuth]
      summary: Test Google OAuth configuration
      description: |
        Test endpoint to verify Google OAuth configuration.
        **Note**: This endpoint should be removed in production.
      operationId: testGoogleConfig
      responses:
        '200':
          description: Google OAuth configuration status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  # Workspace Management Endpoints
  /workspaces:
    get:
      tags: [Workspace Management]
      summary: Get user's workspaces
      description: |
        Retrieve workspaces that the user owns or is a member of, with filtering and pagination support.

        **Features**:
        - Filter by role, public status, tags
        - Search by name and description
        - Sort by various criteria
        - Pagination support
      operationId: getUserWorkspaces
      security:
        - bearerAuth: []
      parameters:
        - name: search
          in: query
          description: Search query for workspace name/description
          schema:
            type: string
            maxLength: 100
          example: "team"
        - name: role
          in: query
          description: Filter by user's role in workspace
          schema:
            type: string
            enum: [owner, admin, editor, viewer]
          example: "owner"
        - name: isPublic
          in: query
          description: Filter by public status
          schema:
            type: boolean
          example: false
        - name: tags
          in: query
          description: Filter by tags (comma-separated)
          schema:
            type: string
          example: "development,team"
        - name: sortBy
          in: query
          description: Sort field
          schema:
            type: string
            enum: [name, createdAt, updatedAt, lastActivityAt, memberCount, databaseCount]
            default: updatedAt
        - name: sortOrder
          in: query
          description: Sort order
          schema:
            type: string
            enum: [asc, desc]
            default: desc
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Workspaces retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/WorkspaceListResponse'
              examples:
                success:
                  summary: Successful response
                  value:
                    success: true
                    message: Workspaces retrieved successfully
                    data:
                      workspaces:
                        - id: 507f1f77bcf86cd799439030
                          name: Team Alpha
                          description: Main workspace for Team Alpha
                          icon: 🚀
                          ownerId: 507f1f77bcf86cd799439013
                          isPublic: false
                          memberCount: 8
                          databaseCount: 15
                          lastActivityAt: 2023-01-01T10:30:00Z
                      total: 12
                      totalPages: 1
                      currentPage: 1
                      hasNextPage: false
                      hasPrevPage: false
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

    post:
      tags: [Workspace Management]
      summary: Create a new workspace
      description: |
        Create a new workspace. The user becomes the owner and first member.

        **Features**:
        - Automatic owner membership
        - Customizable settings
        - Tag support
        - Color themes
      operationId: createWorkspace
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWorkspaceRequest'
            examples:
              basic_workspace:
                summary: Basic workspace
                value:
                  name: Team Alpha
                  description: Main workspace for Team Alpha projects
                  icon: 🚀
              full_workspace:
                summary: Full workspace with all options
                value:
                  name: Development Team
                  description: Workspace for development projects
                  icon: 💻
                  color: "#3B82F6"
                  isPublic: false
                  allowMemberInvites: true
                  defaultDatabasePermission: read
                  tags: ["development", "team"]
      responses:
        '201':
          description: Workspace created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Workspace'
              examples:
                success:
                  summary: Workspace created
                  value:
                    success: true
                    message: Workspace created successfully
                    data:
                      id: 507f1f77bcf86cd799439030
                      name: Team Alpha
                      description: Main workspace for Team Alpha projects
                      icon: 🚀
                      ownerId: 507f1f77bcf86cd799439013
                      isPublic: false
                      memberCount: 1
                      databaseCount: 0
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '409':
          description: Workspace name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /workspaces/public:
    get:
      tags: [Workspace Management]
      summary: Get public workspaces
      description: |
        Retrieve publicly accessible workspaces. No authentication required.

        **Features**:
        - Browse public workspaces
        - Search and filter capabilities
        - Pagination support
      operationId: getPublicWorkspaces
      parameters:
        - name: search
          in: query
          description: Search query
          schema:
            type: string
            maxLength: 100
        - name: tags
          in: query
          description: Filter by tags
          schema:
            type: string
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Public workspaces retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/WorkspaceListResponse'

  /workspaces/search:
    get:
      tags: [Workspace Management]
      summary: Search workspaces
      description: |
        Search workspaces with advanced filtering options.

        **Features**:
        - Full-text search
        - Include public workspaces option
        - Tag filtering
        - Relevance-based sorting
      operationId: searchWorkspaces
      security:
        - bearerAuth: []
      parameters:
        - name: q
          in: query
          required: true
          description: Search query
          schema:
            type: string
            minLength: 1
            maxLength: 100
        - name: includePublic
          in: query
          description: Include public workspaces in results
          schema:
            type: boolean
            default: true
        - name: tags
          in: query
          description: Filter by tags
          schema:
            type: string
        - name: limit
          in: query
          description: Maximum results
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
      responses:
        '200':
          description: Search completed successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/WorkspaceListResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /workspaces/stats:
    get:
      tags: [Workspace Management]
      summary: Get workspace statistics
      description: |
        Get comprehensive statistics about user's workspaces.

        **Features**:
        - Workspace counts by type
        - Database and member statistics
        - Recent activity summary
      operationId: getWorkspaceStats
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Statistics retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/WorkspaceStats'
              examples:
                success:
                  summary: Workspace statistics
                  value:
                    success: true
                    message: Workspace statistics retrieved successfully
                    data:
                      totalWorkspaces: 12
                      ownedWorkspaces: 5
                      memberWorkspaces: 7
                      publicWorkspaces: 25
                      totalDatabases: 45
                      totalMembers: 23
                      recentActivity: []
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /workspaces/{id}:
    get:
      tags: [Workspace Management]
      summary: Get workspace by ID
      description: |
        Retrieve detailed information about a specific workspace.

        **Features**:
        - Complete workspace details
        - Member information
        - Database count
        - Permission checking
      operationId: getWorkspaceById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Workspace ID
          schema:
            type: string
          example: 507f1f77bcf86cd799439030
      responses:
        '200':
          description: Workspace retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Workspace'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Workspace not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

    put:
      tags: [Workspace Management]
      summary: Update workspace
      description: |
        Update workspace information and settings.

        **Features**:
        - Update basic information
        - Modify privacy settings
        - Change appearance settings
        - Update member permissions
      operationId: updateWorkspace
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Workspace ID
          schema:
            type: string
          example: 507f1f77bcf86cd799439030
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWorkspaceRequest'
      responses:
        '200':
          description: Workspace updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Workspace'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

    delete:
      tags: [Workspace Management]
      summary: Delete workspace
      description: |
        Delete a workspace permanently. Only workspace owners can delete workspaces.

        **Security Features**:
        - Owner-only access
        - Database dependency check
        - Permanent deletion warning
      operationId: deleteWorkspace
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Workspace ID
          schema:
            type: string
          example: 507f1f77bcf86cd799439030
      responses:
        '200':
          description: Workspace deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /workspaces/{id}/members:
    get:
      tags: [Workspace Members]
      summary: Get workspace members
      description: |
        Retrieve list of workspace members with user details and roles.

        **Features**:
        - Member list with user information
        - Role-based filtering
        - Search by user details
        - Pagination support
      operationId: getWorkspaceMembers
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Workspace ID
          schema:
            type: string
          example: 507f1f77bcf86cd799439030
        - name: role
          in: query
          description: Filter by member role
          schema:
            type: string
            enum: [owner, admin, editor, viewer]
        - name: search
          in: query
          description: Search members by name or email
          schema:
            type: string
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Members retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/WorkspaceMembersListResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

    post:
      tags: [Workspace Members]
      summary: Add member to workspace
      description: |
        Invite a user to join the workspace with specified role.

        **Features**:
        - Email or user ID invitation
        - Role assignment
        - Permission validation
        - Duplicate member check
      operationId: addWorkspaceMember
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Workspace ID
          schema:
            type: string
          example: 507f1f77bcf86cd799439030
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InviteMemberRequest'
      responses:
        '200':
          description: Member added successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Workspace'
        '400':
          description: Validation error or user already member
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /workspaces/{id}/members/{memberId}:
    delete:
      tags: [Workspace Members]
      summary: Remove member from workspace
      description: |
        Remove a member from the workspace. Admins can remove any member except owner.

        **Features**:
        - Permission-based removal
        - Owner protection
        - Self-removal allowed
        - Member notification
      operationId: removeWorkspaceMember
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Workspace ID
          schema:
            type: string
          example: 507f1f77bcf86cd799439030
        - name: memberId
          in: path
          required: true
          description: Member user ID
          schema:
            type: string
          example: 507f1f77bcf86cd799439014
      responses:
        '200':
          description: Member removed successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Workspace'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Insufficient permissions or cannot remove owner
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /workspaces/{id}/members/{memberId}/role:
    put:
      tags: [Workspace Members]
      summary: Update member role
      description: |
        Update a workspace member's role. Only admins and owners can change roles.

        **Features**:
        - Role hierarchy enforcement
        - Owner role protection
        - Permission validation
        - Role change notification
      operationId: updateMemberRole
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Workspace ID
          schema:
            type: string
          example: 507f1f77bcf86cd799439030
        - name: memberId
          in: path
          required: true
          description: Member user ID
          schema:
            type: string
          example: 507f1f77bcf86cd799439014
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMemberRoleRequest'
      responses:
        '200':
          description: Member role updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Workspace'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /workspaces/{id}/leave:
    post:
      tags: [Workspace Members]
      summary: Leave workspace
      description: |
        Leave a workspace (remove yourself as a member). Owners cannot leave their own workspace.

        **Features**:
        - Self-removal from workspace
        - Owner protection
        - Automatic cleanup
        - Member notification
      operationId: leaveWorkspace
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Workspace ID
          schema:
            type: string
          example: 507f1f77bcf86cd799439030
      responses:
        '200':
          description: Left workspace successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                success:
                  summary: Successfully left workspace
                  value:
                    success: true
                    message: Left workspace successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Owners cannot leave their own workspace
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /workspaces/{id}/permissions:
    get:
      tags: [Workspace Management]
      summary: Get workspace permissions
      description: |
        Get current user's permissions for the specified workspace.

        **Features**:
        - Detailed permission breakdown
        - Role-based access information
        - Action-specific permissions
        - UI permission helpers
      operationId: getWorkspacePermissions
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Workspace ID
          schema:
            type: string
          example: 507f1f77bcf86cd799439030
      responses:
        '200':
          description: Permissions retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/WorkspacePermissions'
              examples:
                editor_permissions:
                  summary: Editor permissions
                  value:
                    success: true
                    message: Workspace permissions retrieved successfully
                    data:
                      canView: true
                      canEdit: true
                      canAdmin: false
                      canDelete: false
                      canInviteMembers: true
                      canManageMembers: false
                      canCreateDatabases: true
                      role: editor
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Workspace not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /workspaces/{id}/duplicate:
    post:
      tags: [Workspace Management]
      summary: Duplicate workspace
      description: |
        Create a copy of an existing workspace with similar settings.

        **Features**:
        - Copy workspace structure
        - Preserve settings and appearance
        - Create as private workspace
        - Custom name for copy
      operationId: duplicateWorkspace
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Workspace ID to duplicate
          schema:
            type: string
          example: 507f1f77bcf86cd799439030
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name for the duplicated workspace
                  example: Team Alpha (Copy)
      responses:
        '201':
          description: Workspace duplicated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Workspace'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Source workspace not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /workspaces/{id}/activity:
    get:
      tags: [Workspace Management]
      summary: Get workspace activity
      description: |
        Retrieve recent activity and events in the workspace.

        **Features**:
        - Recent member activities
        - Database creation/updates
        - Member join/leave events
        - Chronological activity feed

        **Note**: Activity tracking is currently in development.
      operationId: getWorkspaceActivity
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Workspace ID
          schema:
            type: string
          example: 507f1f77bcf86cd799439030
        - name: limit
          in: query
          description: Number of activities to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Activity retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            type:
                              type: string
                              enum: [member_joined, member_left, database_created, workspace_updated]
                            userId:
                              type: string
                            timestamp:
                              type: string
                              format: date-time
                            details:
                              type: object
              examples:
                activity_list:
                  summary: Recent workspace activity
                  value:
                    success: true
                    message: Workspace activity retrieved successfully
                    data: []
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  # File Management Endpoints
  /files:
    get:
      tags: [File Management]
      summary: Get user's files
      description: |
        Retrieve user's uploaded files with filtering and pagination.

        **Features**:
        - Category-based filtering
        - Search by filename or description
        - MIME type filtering
        - Sorting and pagination
      operationId: getUserFiles
      security:
        - bearerAuth: []
      parameters:
        - name: category
          in: query
          description: Filter by file category
          schema:
            type: string
        - name: search
          in: query
          description: Search in filename or description
          schema:
            type: string
        - name: mimeType
          in: query
          description: Filter by MIME type
          schema:
            type: string
        - name: sortBy
          in: query
          description: Sort field
          schema:
            type: string
            enum: [name, size, createdAt, updatedAt]
            default: createdAt
        - name: sortOrder
          in: query
          description: Sort order
          schema:
            type: string
            enum: [asc, desc]
            default: desc
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Files retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          files:
                            type: array
                            items:
                              $ref: '#/components/schemas/FileResponse'
                          pagination:
                            $ref: '#/components/schemas/PaginationResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /files/upload:
    post:
      tags: [File Management]
      summary: Upload a file
      description: |
        Upload a single file to the server.

        **Supported File Types**:
        - Images: JPEG, PNG, GIF, WebP
        - Documents: PDF, Word, Excel, PowerPoint
        - Text: Plain text, CSV, JSON
        - Archives: ZIP

        **File Size Limit**: 50MB
      operationId: uploadFile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: File to upload
                description:
                  type: string
                  description: File description
                category:
                  type: string
                  description: File category
                isPublic:
                  type: string
                  enum: ['true', 'false']
                  description: Whether file is publicly accessible
              required:
                - file
      responses:
        '201':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/FileResponse'
        '400':
          description: Invalid file or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /files/bulk-upload:
    post:
      tags: [File Management]
      summary: Upload multiple files
      description: |
        Upload multiple files at once (max 10 files).

        **Features**:
        - Batch file processing
        - Consistent metadata for all files
        - Atomic operation (all succeed or all fail)
      operationId: bulkUploadFiles
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
                  maxItems: 10
                  description: Files to upload (max 10)
                category:
                  type: string
                  description: Category for all files
                isPublic:
                  type: string
                  enum: ['true', 'false']
                  description: Whether files are publicly accessible
              required:
                - files
      responses:
        '201':
          description: Files uploaded successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/FileResponse'
        '400':
          description: Invalid files or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /files/{id}:
    get:
      tags: [File Management]
      summary: Get file details
      description: |
        Retrieve detailed information about a specific file.

        **Features**:
        - File metadata and properties
        - Access control validation
        - Public file access support
      operationId: getFileById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: File ID
          schema:
            type: string
      responses:
        '200':
          description: File details retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/FileResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: File not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

    delete:
      tags: [File Management]
      summary: Delete file
      description: |
        Delete a file permanently from the system.

        **Features**:
        - Permanent file deletion
        - Storage cleanup
        - Access control validation
      operationId: deleteFile
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: File ID
          schema:
            type: string
      responses:
        '200':
          description: File deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: File not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /files/{id}/download:
    get:
      tags: [File Management]
      summary: Download file
      description: |
        Download a file from the server.

        **Features**:
        - Direct file download
        - Proper content headers
        - Access control validation
        - Public file access support
      operationId: downloadFile
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: File ID
          schema:
            type: string
      responses:
        '200':
          description: File download
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: File not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  # Search & Analytics Endpoints
  /search:
    get:
      tags: [Search & Analytics]
      summary: Global search
      description: |
        Search across all content types including databases, records, and files.

        **Features**:
        - Cross-content search
        - Type-specific filtering
        - Relevance scoring
        - Pagination support
      operationId: globalSearch
      security:
        - bearerAuth: []
      parameters:
        - name: q
          in: query
          required: true
          description: Search query
          schema:
            type: string
            minLength: 1
        - name: type
          in: query
          description: Content type filter
          schema:
            type: string
            enum: [all, databases, records, files]
            default: all
        - name: limit
          in: query
          description: Maximum results to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Search completed successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          databases:
                            type: array
                            items:
                              $ref: '#/components/schemas/Database'
                          records:
                            type: array
                            items:
                              $ref: '#/components/schemas/DatabaseRecord'
                          files:
                            type: array
                            items:
                              $ref: '#/components/schemas/FileResponse'
                          total:
                            type: integer
                            description: Total number of results
        '400':
          description: Invalid search query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /search/databases:
    get:
      tags: [Search & Analytics]
      summary: Search databases
      description: |
        Search specifically within databases by name, description, or properties.

        **Features**:
        - Database-specific search
        - Metadata search
        - Access control filtering
      operationId: searchDatabases
      security:
        - bearerAuth: []
      parameters:
        - name: q
          in: query
          required: true
          description: Search query
          schema:
            type: string
            minLength: 1
        - name: limit
          in: query
          description: Maximum results to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Database search completed successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          databases:
                            type: array
                            items:
                              $ref: '#/components/schemas/Database'
                          total:
                            type: integer
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /search/records:
    get:
      tags: [Search & Analytics]
      summary: Search records
      description: |
        Search within database records by content and properties.

        **Features**:
        - Record content search
        - Property-based filtering
        - Database-specific search
        - Full-text search capabilities
      operationId: searchRecords
      security:
        - bearerAuth: []
      parameters:
        - name: q
          in: query
          required: true
          description: Search query
          schema:
            type: string
            minLength: 1
        - name: databaseId
          in: query
          description: Limit search to specific database
          schema:
            type: string
        - name: limit
          in: query
          description: Maximum results to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Record search completed successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          records:
                            type: array
                            items:
                              $ref: '#/components/schemas/DatabaseRecord'
                          total:
                            type: integer
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /search/suggestions:
    get:
      tags: [Search & Analytics]
      summary: Get search suggestions
      description: |
        Get search suggestions based on user's query and content.

        **Features**:
        - Auto-complete suggestions
        - Recent searches
        - Popular searches
        - Context-aware suggestions
      operationId: getSearchSuggestions
      security:
        - bearerAuth: []
      parameters:
        - name: q
          in: query
          required: true
          description: Partial search query
          schema:
            type: string
            minLength: 1
      responses:
        '200':
          description: Search suggestions retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            suggestion:
                              type: string
                              description: Suggested search term
                            type:
                              type: string
                              enum: [database, record, file, recent, popular]
                              description: Type of suggestion
                            count:
                              type: integer
                              description: Number of results for this suggestion
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /analytics/dashboard:
    get:
      tags: [Search & Analytics]
      summary: Get dashboard analytics
      description: |
        Retrieve comprehensive analytics for the user's dashboard.

        **Features**:
        - Usage statistics
        - Activity trends
        - Performance metrics
        - Growth indicators
      operationId: getDashboardAnalytics
      security:
        - bearerAuth: []
      parameters:
        - name: period
          in: query
          description: Time period for analytics
          schema:
            type: string
            enum: [day, week, month, year]
            default: month
      responses:
        '200':
          description: Dashboard analytics retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          totalDatabases:
                            type: integer
                            description: Total number of databases
                          totalRecords:
                            type: integer
                            description: Total number of records
                          totalFiles:
                            type: integer
                            description: Total number of files
                          recentActivity:
                            type: array
                            items:
                              type: object
                              properties:
                                type:
                                  type: string
                                  enum: [database_created, record_created, file_uploaded]
                                timestamp:
                                  type: string
                                  format: date-time
                                details:
                                  type: object
                          usage:
                            type: object
                            properties:
                              databasesCreated:
                                type: integer
                              recordsCreated:
                                type: integer
                              filesUploaded:
                                type: integer
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /analytics/databases/{id}:
    get:
      tags: [Search & Analytics]
      summary: Get database analytics
      description: |
        Retrieve analytics for a specific database.

        **Features**:
        - Database usage statistics
        - Record creation trends
        - View analytics
        - Access patterns
      operationId: getDatabaseAnalytics
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Database ID
          schema:
            type: string
        - name: period
          in: query
          description: Time period for analytics
          schema:
            type: string
            enum: [day, week, month, year]
            default: month
      responses:
        '200':
          description: Database analytics retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          databaseId:
                            type: string
                          totalRecords:
                            type: integer
                          totalViews:
                            type: integer
                          recordsCreated:
                            type: integer
                          viewsCreated:
                            type: integer
                          lastAccessed:
                            type: string
                            format: date-time
                            nullable: true
                          usage:
                            type: array
                            items:
                              type: object
                              properties:
                                date:
                                  type: string
                                  format: date
                                records:
                                  type: integer
                                views:
                                  type: integer
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Database not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /analytics/usage:
    get:
      tags: [Search & Analytics]
      summary: Get usage statistics
      description: |
        Retrieve system-wide usage statistics (admin only).

        **Features**:
        - System-wide metrics
        - User activity statistics
        - Resource usage tracking
        - Performance indicators

        **Admin Access Required**
      operationId: getUsageStatistics
      security:
        - bearerAuth: []
      parameters:
        - name: period
          in: query
          description: Time period for statistics
          schema:
            type: string
            enum: [day, week, month, year]
            default: month
        - name: startDate
          in: query
          description: Start date for custom period
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          description: End date for custom period
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Usage statistics retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          totalUsers:
                            type: integer
                            description: Total number of users
                          activeUsers:
                            type: integer
                            description: Number of active users
                          totalDatabases:
                            type: integer
                            description: Total number of databases
                          totalRecords:
                            type: integer
                            description: Total number of records
                          totalFiles:
                            type: integer
                            description: Total number of files
                          storageUsed:
                            type: integer
                            description: Total storage used in bytes
                          apiCalls:
                            type: integer
                            description: Total API calls made
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  # Tags Management Endpoints
  /tags:
    get:
      tags: [Tags Management]
      summary: Get user's tags
      description: |
        Retrieve all tags created by the user.

        **Features**:
        - User-specific tags
        - Search and filtering
        - Sorting options
        - Usage statistics
      operationId: getUserTags
      security:
        - bearerAuth: []
      parameters:
        - name: search
          in: query
          description: Search tags by name
          schema:
            type: string
        - name: sortBy
          in: query
          description: Sort field
          schema:
            type: string
            enum: [name, createdAt, updatedAt]
            default: name
        - name: sortOrder
          in: query
          description: Sort order
          schema:
            type: string
            enum: [asc, desc]
            default: asc
      responses:
        '200':
          description: Tags retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Tag'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

    post:
      tags: [Tags Management]
      summary: Create new tag
      description: |
        Create a new tag for organizing content.

        **Features**:
        - Custom tag names
        - Color coding
        - Optional descriptions
        - Duplicate prevention
      operationId: createTag
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 50
                  description: Tag name
                  example: Important
                color:
                  type: string
                  pattern: '^#[0-9A-F]{6}$'
                  description: Hex color code
                  example: '#FF5733'
                description:
                  type: string
                  maxLength: 200
                  description: Optional tag description
                  example: High priority items
              required:
                - name
      responses:
        '201':
          description: Tag created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Tag'
        '400':
          description: Validation error or duplicate tag
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /tags/{id}:
    get:
      tags: [Tags Management]
      summary: Get tag by ID
      description: |
        Retrieve detailed information about a specific tag.

        **Features**:
        - Tag details and metadata
        - Usage statistics
        - Associated content count
      operationId: getTagById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Tag ID
          schema:
            type: string
      responses:
        '200':
          description: Tag retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Tag'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Tag not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

    put:
      tags: [Tags Management]
      summary: Update tag
      description: |
        Update an existing tag's properties.

        **Features**:
        - Update name, color, description
        - Validation and duplicate checking
        - Preserve tag associations
      operationId: updateTag
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Tag ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 50
                  description: Tag name
                color:
                  type: string
                  pattern: '^#[0-9A-F]{6}$'
                  description: Hex color code
                description:
                  type: string
                  maxLength: 200
                  description: Tag description
      responses:
        '200':
          description: Tag updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Tag'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Tag not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

    delete:
      tags: [Tags Management]
      summary: Delete tag
      description: |
        Delete a tag permanently.

        **Features**:
        - Permanent tag deletion
        - Remove tag associations
        - Cleanup related data
      operationId: deleteTag
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Tag ID
          schema:
            type: string
      responses:
        '200':
          description: Tag deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Tag not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  # Notifications Management Endpoints
  /notifications:
    get:
      tags: [Notifications]
      summary: Get user notifications
      description: |
        Retrieve user's notifications with filtering and pagination.

        **Features**:
        - Read/unread filtering
        - Type-based filtering
        - Pagination support
        - Sorting options
      operationId: getUserNotifications
      security:
        - bearerAuth: []
      parameters:
        - name: isRead
          in: query
          description: Filter by read status
          schema:
            type: boolean
        - name: type
          in: query
          description: Filter by notification type
          schema:
            type: string
            enum: [info, warning, error, success]
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: sortBy
          in: query
          description: Sort field
          schema:
            type: string
            enum: [createdAt, updatedAt]
            default: createdAt
        - name: sortOrder
          in: query
          description: Sort order
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: Notifications retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          notifications:
                            type: array
                            items:
                              $ref: '#/components/schemas/Notification'
                          pagination:
                            $ref: '#/components/schemas/PaginationResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /notifications/{id}/read:
    put:
      tags: [Notifications]
      summary: Mark notification as read
      description: |
        Mark a specific notification as read.

        **Features**:
        - Individual notification marking
        - Read status tracking
        - Timestamp recording
      operationId: markNotificationAsRead
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Notification ID
          schema:
            type: string
      responses:
        '200':
          description: Notification marked as read
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Notification not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /notifications/read-all:
    put:
      tags: [Notifications]
      summary: Mark all notifications as read
      description: |
        Mark all user's notifications as read.

        **Features**:
        - Bulk read marking
        - Efficient batch operation
        - Complete notification clearing
      operationId: markAllNotificationsAsRead
      security:
        - bearerAuth: []
      responses:
        '200':
          description: All notifications marked as read
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /notifications/{id}:
    delete:
      tags: [Notifications]
      summary: Delete notification
      description: |
        Delete a specific notification permanently.

        **Features**:
        - Permanent notification deletion
        - Individual notification removal
        - Cleanup and optimization
      operationId: deleteNotification
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Notification ID
          schema:
            type: string
      responses:
        '200':
          description: Notification deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Notification not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  # Enhanced Database Management Endpoints

  /databases/{id}/properties/reorder:
    put:
      tags: [Database Properties]
      summary: Reorder database properties
      description: |
        Reorder database properties by providing new order sequence.

        **Features**:
        - Custom property ordering
        - Drag-and-drop support
        - Validation of property IDs
        - Atomic reordering operation
      operationId: reorderDatabaseProperties
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Database ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                propertyIds:
                  type: array
                  items:
                    type: string
                  minItems: 1
                  description: Array of property IDs in desired order
                  example: ["prop1", "prop2", "prop3"]
              required:
                - propertyIds
      responses:
        '200':
          description: Properties reordered successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/DatabaseProperty'
        '400':
          description: Invalid property IDs or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Database not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /databases/{id}/permissions:
    get:
      tags: [Database Permissions]
      summary: Get database permissions
      description: |
        Retrieve permission settings for a database.

        **Features**:
        - User permission levels
        - Access control lists
        - Permission inheritance
        - Role-based access
      operationId: getDatabasePermissions
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Database ID
          schema:
            type: string
      responses:
        '200':
          description: Permissions retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          owner:
                            type: string
                            description: Database owner ID
                          permissions:
                            type: array
                            items:
                              type: object
                              properties:
                                userId:
                                  type: string
                                permission:
                                  type: string
                                  enum: [read, write, admin]
                                grantedAt:
                                  type: string
                                  format: date-time
                                grantedBy:
                                  type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Database not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /databases/{id}/permissions/{userId}:
    put:
      tags: [Database Permissions]
      summary: Update user permission level
      description: |
        Update a user's permission level for a database.

        **Features**:
        - Permission level changes
        - Access control management
        - Audit trail
        - Validation checks
      operationId: updateDatabasePermission
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Database ID
          schema:
            type: string
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                permission:
                  type: string
                  enum: [read, write, admin]
                  description: Permission level to grant
              required:
                - permission
      responses:
        '200':
          description: Permission updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid permission level
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Database or user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /databases/{id}/records/bulk:
    post:
      tags: [Database Records]
      summary: Bulk create records
      description: |
        Create multiple records in a single operation.

        **Features**:
        - Batch record creation
        - Atomic operations
        - Validation for all records
        - Performance optimization
      operationId: bulkCreateRecords
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Database ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                records:
                  type: array
                  items:
                    type: object
                    properties:
                      properties:
                        type: object
                        additionalProperties: true
                        description: Record properties
                  minItems: 1
                  description: Array of records to create
              required:
                - records
      responses:
        '201':
          description: Records created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/DatabaseRecord'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Database not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

    put:
      tags: [Database Records]
      summary: Bulk update records
      description: |
        Update multiple records in a single operation.

        **Features**:
        - Batch record updates
        - Partial property updates
        - Atomic operations
        - Validation for all updates
      operationId: bulkUpdateRecords
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Database ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                updates:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        description: Record ID to update
                      properties:
                        type: object
                        additionalProperties: true
                        description: Properties to update
                    required:
                      - id
                      - properties
                  minItems: 1
                  description: Array of record updates
              required:
                - updates
      responses:
        '200':
          description: Records updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/DatabaseRecord'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Database not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

    delete:
      tags: [Database Records]
      summary: Bulk delete records
      description: |
        Delete multiple records in a single operation.

        **Features**:
        - Batch record deletion
        - Atomic operations
        - Validation of record IDs
        - Performance optimization
      operationId: bulkDeleteRecords
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Database ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                recordIds:
                  type: array
                  items:
                    type: string
                  minItems: 1
                  description: Array of record IDs to delete
              required:
                - recordIds
      responses:
        '200':
          description: Records deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Database not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  # User Profile Avatar Endpoints
  /users/profile/avatar:
    post:
      tags: [User Management]
      summary: Upload profile avatar
      description: |
        Upload a profile picture for the current user.

        **Features**:
        - Image file upload
        - Automatic resizing
        - Format validation
        - Previous avatar replacement

        **Supported Formats**: JPEG, PNG, GIF, WebP
        **File Size Limit**: 5MB
      operationId: uploadProfileAvatar
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
                  description: Avatar image file
              required:
                - avatar
      responses:
        '200':
          description: Avatar uploaded successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          avatarUrl:
                            type: string
                            description: URL of the uploaded avatar
                            example: https://example.com/avatars/user123.jpg
        '400':
          description: Invalid file format or size
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

    delete:
      tags: [User Management]
      summary: Remove profile avatar
      description: |
        Remove the current user's profile picture.

        **Features**:
        - Avatar deletion
        - Revert to default avatar
        - Storage cleanup
      operationId: deleteProfileAvatar
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Avatar removed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  # Template Creation Endpoint
  /templates/{id}/use:
    post:
      tags: [Database Templates]
      summary: Create database from template
      description: |
        Create a new database using an existing template.

        **Features**:
        - Template-based database creation
        - Custom database naming
        - Workspace assignment
        - Category assignment
        - Property inheritance
      operationId: createDatabaseFromTemplate
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Template ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 100
                  description: Name for the new database
                  example: My Project Database
                description:
                  type: string
                  maxLength: 500
                  description: Optional description for the database
                  example: Database for tracking project tasks
                workspaceId:
                  type: string
                  description: Workspace to create database in
                categoryId:
                  type: string
                  description: Category to assign to database
              required:
                - name
      responses:
        '201':
          description: Database created from template successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Database'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Template not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  # System Information Endpoints
  /version:
    get:
      tags: [System]
      summary: Get API version information
      description: |
        Retrieve version information about the API.

        **Features**:
        - API version details
        - Build information
        - Environment details
        - Release notes
      operationId: getApiVersion
      responses:
        '200':
          description: Version information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  version:
                    type: string
                    description: API version
                    example: 1.0.0
                  name:
                    type: string
                    description: API name
                    example: Second Brain Server API
                  environment:
                    type: string
                    description: Current environment
                    example: production
                  timestamp:
                    type: string
                    format: date-time
                    description: Response timestamp
                    example: 2023-01-01T12:00:00Z

  /status:
    get:
      tags: [System]
      summary: Get system status
      description: |
        Retrieve current system status and health metrics.

        **Features**:
        - System operational status
        - Uptime information
        - Memory usage
        - Performance metrics
      operationId: getSystemStatus
      responses:
        '200':
          description: System status retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  status:
                    type: string
                    enum: [operational, degraded, maintenance, down]
                    description: System status
                    example: operational
                  uptime:
                    type: number
                    description: System uptime in seconds
                    example: 86400
                  memory:
                    type: object
                    properties:
                      rss:
                        type: number
                        description: Resident Set Size
                      heapTotal:
                        type: number
                        description: Total heap size
                      heapUsed:
                        type: number
                        description: Used heap size
                      external:
                        type: number
                        description: External memory usage
                  timestamp:
                    type: string
                    format: date-time
                    description: Response timestamp
                  environment:
                    type: string
                    description: Current environment
                    example: production

